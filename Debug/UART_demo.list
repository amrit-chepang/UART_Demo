
UART_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b9c  08000138  08000138  00001138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08003cd4  08003cd4  00004cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003db8  08003db8  00005014  2**0
                  CONTENTS
  4 .ARM          00000008  08003db8  08003db8  00004db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003dc0  08003dc0  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dc0  08003dc0  00004dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003dc4  08003dc4  00004dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08003dc8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000014  08003ddc  00005014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08003ddc  0000515c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f38e  00000000  00000000  0000503e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002341  00000000  00000000  000143cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  00016710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000be1  00000000  00000000  000176b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b59f  00000000  00000000  00018291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ead0  00000000  00000000  00033830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000acada  00000000  00000000  00042300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eedda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004098  00000000  00000000  000eee20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000f2eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000014 	.word	0x20000014
 8000154:	00000000 	.word	0x00000000
 8000158:	08003cbc 	.word	0x08003cbc

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000018 	.word	0x20000018
 8000174:	08003cbc 	.word	0x08003cbc

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295
 8000188:	f04f 30ff 	movne.w	r0, #4294967295
 800018c:	f000 b96a 	b.w	8000464 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9d08      	ldr	r5, [sp, #32]
 80001ae:	460c      	mov	r4, r1
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d14e      	bne.n	8000252 <__udivmoddi4+0xaa>
 80001b4:	4694      	mov	ip, r2
 80001b6:	458c      	cmp	ip, r1
 80001b8:	4686      	mov	lr, r0
 80001ba:	fab2 f282 	clz	r2, r2
 80001be:	d962      	bls.n	8000286 <__udivmoddi4+0xde>
 80001c0:	b14a      	cbz	r2, 80001d6 <__udivmoddi4+0x2e>
 80001c2:	f1c2 0320 	rsb	r3, r2, #32
 80001c6:	4091      	lsls	r1, r2
 80001c8:	fa20 f303 	lsr.w	r3, r0, r3
 80001cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d0:	4319      	orrs	r1, r3
 80001d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80001d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001da:	fa1f f68c 	uxth.w	r6, ip
 80001de:	fbb1 f4f7 	udiv	r4, r1, r7
 80001e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001e6:	fb07 1114 	mls	r1, r7, r4, r1
 80001ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001ee:	fb04 f106 	mul.w	r1, r4, r6
 80001f2:	4299      	cmp	r1, r3
 80001f4:	d90a      	bls.n	800020c <__udivmoddi4+0x64>
 80001f6:	eb1c 0303 	adds.w	r3, ip, r3
 80001fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80001fe:	f080 8112 	bcs.w	8000426 <__udivmoddi4+0x27e>
 8000202:	4299      	cmp	r1, r3
 8000204:	f240 810f 	bls.w	8000426 <__udivmoddi4+0x27e>
 8000208:	3c02      	subs	r4, #2
 800020a:	4463      	add	r3, ip
 800020c:	1a59      	subs	r1, r3, r1
 800020e:	fa1f f38e 	uxth.w	r3, lr
 8000212:	fbb1 f0f7 	udiv	r0, r1, r7
 8000216:	fb07 1110 	mls	r1, r7, r0, r1
 800021a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800021e:	fb00 f606 	mul.w	r6, r0, r6
 8000222:	429e      	cmp	r6, r3
 8000224:	d90a      	bls.n	800023c <__udivmoddi4+0x94>
 8000226:	eb1c 0303 	adds.w	r3, ip, r3
 800022a:	f100 31ff 	add.w	r1, r0, #4294967295
 800022e:	f080 80fc 	bcs.w	800042a <__udivmoddi4+0x282>
 8000232:	429e      	cmp	r6, r3
 8000234:	f240 80f9 	bls.w	800042a <__udivmoddi4+0x282>
 8000238:	4463      	add	r3, ip
 800023a:	3802      	subs	r0, #2
 800023c:	1b9b      	subs	r3, r3, r6
 800023e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000242:	2100      	movs	r1, #0
 8000244:	b11d      	cbz	r5, 800024e <__udivmoddi4+0xa6>
 8000246:	40d3      	lsrs	r3, r2
 8000248:	2200      	movs	r2, #0
 800024a:	e9c5 3200 	strd	r3, r2, [r5]
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d905      	bls.n	8000262 <__udivmoddi4+0xba>
 8000256:	b10d      	cbz	r5, 800025c <__udivmoddi4+0xb4>
 8000258:	e9c5 0100 	strd	r0, r1, [r5]
 800025c:	2100      	movs	r1, #0
 800025e:	4608      	mov	r0, r1
 8000260:	e7f5      	b.n	800024e <__udivmoddi4+0xa6>
 8000262:	fab3 f183 	clz	r1, r3
 8000266:	2900      	cmp	r1, #0
 8000268:	d146      	bne.n	80002f8 <__udivmoddi4+0x150>
 800026a:	42a3      	cmp	r3, r4
 800026c:	d302      	bcc.n	8000274 <__udivmoddi4+0xcc>
 800026e:	4290      	cmp	r0, r2
 8000270:	f0c0 80f0 	bcc.w	8000454 <__udivmoddi4+0x2ac>
 8000274:	1a86      	subs	r6, r0, r2
 8000276:	eb64 0303 	sbc.w	r3, r4, r3
 800027a:	2001      	movs	r0, #1
 800027c:	2d00      	cmp	r5, #0
 800027e:	d0e6      	beq.n	800024e <__udivmoddi4+0xa6>
 8000280:	e9c5 6300 	strd	r6, r3, [r5]
 8000284:	e7e3      	b.n	800024e <__udivmoddi4+0xa6>
 8000286:	2a00      	cmp	r2, #0
 8000288:	f040 8090 	bne.w	80003ac <__udivmoddi4+0x204>
 800028c:	eba1 040c 	sub.w	r4, r1, ip
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	fa1f f78c 	uxth.w	r7, ip
 8000298:	2101      	movs	r1, #1
 800029a:	fbb4 f6f8 	udiv	r6, r4, r8
 800029e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a2:	fb08 4416 	mls	r4, r8, r6, r4
 80002a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002aa:	fb07 f006 	mul.w	r0, r7, r6
 80002ae:	4298      	cmp	r0, r3
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0x11c>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80002ba:	d202      	bcs.n	80002c2 <__udivmoddi4+0x11a>
 80002bc:	4298      	cmp	r0, r3
 80002be:	f200 80cd 	bhi.w	800045c <__udivmoddi4+0x2b4>
 80002c2:	4626      	mov	r6, r4
 80002c4:	1a1c      	subs	r4, r3, r0
 80002c6:	fa1f f38e 	uxth.w	r3, lr
 80002ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80002ce:	fb08 4410 	mls	r4, r8, r0, r4
 80002d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002d6:	fb00 f707 	mul.w	r7, r0, r7
 80002da:	429f      	cmp	r7, r3
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0x148>
 80002de:	eb1c 0303 	adds.w	r3, ip, r3
 80002e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80002e6:	d202      	bcs.n	80002ee <__udivmoddi4+0x146>
 80002e8:	429f      	cmp	r7, r3
 80002ea:	f200 80b0 	bhi.w	800044e <__udivmoddi4+0x2a6>
 80002ee:	4620      	mov	r0, r4
 80002f0:	1bdb      	subs	r3, r3, r7
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	e7a5      	b.n	8000244 <__udivmoddi4+0x9c>
 80002f8:	f1c1 0620 	rsb	r6, r1, #32
 80002fc:	408b      	lsls	r3, r1
 80002fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000302:	431f      	orrs	r7, r3
 8000304:	fa20 fc06 	lsr.w	ip, r0, r6
 8000308:	fa04 f301 	lsl.w	r3, r4, r1
 800030c:	ea43 030c 	orr.w	r3, r3, ip
 8000310:	40f4      	lsrs	r4, r6
 8000312:	fa00 f801 	lsl.w	r8, r0, r1
 8000316:	0c38      	lsrs	r0, r7, #16
 8000318:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800031c:	fbb4 fef0 	udiv	lr, r4, r0
 8000320:	fa1f fc87 	uxth.w	ip, r7
 8000324:	fb00 441e 	mls	r4, r0, lr, r4
 8000328:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800032c:	fb0e f90c 	mul.w	r9, lr, ip
 8000330:	45a1      	cmp	r9, r4
 8000332:	fa02 f201 	lsl.w	r2, r2, r1
 8000336:	d90a      	bls.n	800034e <__udivmoddi4+0x1a6>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800033e:	f080 8084 	bcs.w	800044a <__udivmoddi4+0x2a2>
 8000342:	45a1      	cmp	r9, r4
 8000344:	f240 8081 	bls.w	800044a <__udivmoddi4+0x2a2>
 8000348:	f1ae 0e02 	sub.w	lr, lr, #2
 800034c:	443c      	add	r4, r7
 800034e:	eba4 0409 	sub.w	r4, r4, r9
 8000352:	fa1f f983 	uxth.w	r9, r3
 8000356:	fbb4 f3f0 	udiv	r3, r4, r0
 800035a:	fb00 4413 	mls	r4, r0, r3, r4
 800035e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000362:	fb03 fc0c 	mul.w	ip, r3, ip
 8000366:	45a4      	cmp	ip, r4
 8000368:	d907      	bls.n	800037a <__udivmoddi4+0x1d2>
 800036a:	193c      	adds	r4, r7, r4
 800036c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000370:	d267      	bcs.n	8000442 <__udivmoddi4+0x29a>
 8000372:	45a4      	cmp	ip, r4
 8000374:	d965      	bls.n	8000442 <__udivmoddi4+0x29a>
 8000376:	3b02      	subs	r3, #2
 8000378:	443c      	add	r4, r7
 800037a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800037e:	fba0 9302 	umull	r9, r3, r0, r2
 8000382:	eba4 040c 	sub.w	r4, r4, ip
 8000386:	429c      	cmp	r4, r3
 8000388:	46ce      	mov	lr, r9
 800038a:	469c      	mov	ip, r3
 800038c:	d351      	bcc.n	8000432 <__udivmoddi4+0x28a>
 800038e:	d04e      	beq.n	800042e <__udivmoddi4+0x286>
 8000390:	b155      	cbz	r5, 80003a8 <__udivmoddi4+0x200>
 8000392:	ebb8 030e 	subs.w	r3, r8, lr
 8000396:	eb64 040c 	sbc.w	r4, r4, ip
 800039a:	fa04 f606 	lsl.w	r6, r4, r6
 800039e:	40cb      	lsrs	r3, r1
 80003a0:	431e      	orrs	r6, r3
 80003a2:	40cc      	lsrs	r4, r1
 80003a4:	e9c5 6400 	strd	r6, r4, [r5]
 80003a8:	2100      	movs	r1, #0
 80003aa:	e750      	b.n	800024e <__udivmoddi4+0xa6>
 80003ac:	f1c2 0320 	rsb	r3, r2, #32
 80003b0:	fa20 f103 	lsr.w	r1, r0, r3
 80003b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003b8:	fa24 f303 	lsr.w	r3, r4, r3
 80003bc:	4094      	lsls	r4, r2
 80003be:	430c      	orrs	r4, r1
 80003c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80003c8:	fa1f f78c 	uxth.w	r7, ip
 80003cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d0:	fb08 3110 	mls	r1, r8, r0, r3
 80003d4:	0c23      	lsrs	r3, r4, #16
 80003d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003da:	fb00 f107 	mul.w	r1, r0, r7
 80003de:	4299      	cmp	r1, r3
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x24c>
 80003e2:	eb1c 0303 	adds.w	r3, ip, r3
 80003e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80003ea:	d22c      	bcs.n	8000446 <__udivmoddi4+0x29e>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	d92a      	bls.n	8000446 <__udivmoddi4+0x29e>
 80003f0:	3802      	subs	r0, #2
 80003f2:	4463      	add	r3, ip
 80003f4:	1a5b      	subs	r3, r3, r1
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80003fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000400:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000404:	fb01 f307 	mul.w	r3, r1, r7
 8000408:	42a3      	cmp	r3, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x276>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f101 36ff 	add.w	r6, r1, #4294967295
 8000414:	d213      	bcs.n	800043e <__udivmoddi4+0x296>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d911      	bls.n	800043e <__udivmoddi4+0x296>
 800041a:	3902      	subs	r1, #2
 800041c:	4464      	add	r4, ip
 800041e:	1ae4      	subs	r4, r4, r3
 8000420:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000424:	e739      	b.n	800029a <__udivmoddi4+0xf2>
 8000426:	4604      	mov	r4, r0
 8000428:	e6f0      	b.n	800020c <__udivmoddi4+0x64>
 800042a:	4608      	mov	r0, r1
 800042c:	e706      	b.n	800023c <__udivmoddi4+0x94>
 800042e:	45c8      	cmp	r8, r9
 8000430:	d2ae      	bcs.n	8000390 <__udivmoddi4+0x1e8>
 8000432:	ebb9 0e02 	subs.w	lr, r9, r2
 8000436:	eb63 0c07 	sbc.w	ip, r3, r7
 800043a:	3801      	subs	r0, #1
 800043c:	e7a8      	b.n	8000390 <__udivmoddi4+0x1e8>
 800043e:	4631      	mov	r1, r6
 8000440:	e7ed      	b.n	800041e <__udivmoddi4+0x276>
 8000442:	4603      	mov	r3, r0
 8000444:	e799      	b.n	800037a <__udivmoddi4+0x1d2>
 8000446:	4630      	mov	r0, r6
 8000448:	e7d4      	b.n	80003f4 <__udivmoddi4+0x24c>
 800044a:	46d6      	mov	lr, sl
 800044c:	e77f      	b.n	800034e <__udivmoddi4+0x1a6>
 800044e:	4463      	add	r3, ip
 8000450:	3802      	subs	r0, #2
 8000452:	e74d      	b.n	80002f0 <__udivmoddi4+0x148>
 8000454:	4606      	mov	r6, r0
 8000456:	4623      	mov	r3, r4
 8000458:	4608      	mov	r0, r1
 800045a:	e70f      	b.n	800027c <__udivmoddi4+0xd4>
 800045c:	3e02      	subs	r6, #2
 800045e:	4463      	add	r3, ip
 8000460:	e730      	b.n	80002c4 <__udivmoddi4+0x11c>
 8000462:	bf00      	nop

08000464 <__aeabi_idiv0>:
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop

08000468 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000468:	b480      	push	{r7}
 800046a:	b085      	sub	sp, #20
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000470:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000474:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000476:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4313      	orrs	r3, r2
 800047e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000480:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000484:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4013      	ands	r3, r2
 800048a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800048c:	68fb      	ldr	r3, [r7, #12]
}
 800048e:	bf00      	nop
 8000490:	3714      	adds	r7, #20
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr

08000498 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800049c:	f000 fab4 	bl	8000a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a0:	f000 f816 	bl	80004d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a4:	f000 f90c 	bl	80006c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004a8:	f000 f8be 	bl	8000628 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80004ac:	f000 f870 	bl	8000590 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_UART_Transmit(&huart2, txBuffer, sizeof(txBuffer), 1000);
 80004b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004b4:	2206      	movs	r2, #6
 80004b6:	4904      	ldr	r1, [pc, #16]	@ (80004c8 <main+0x30>)
 80004b8:	4804      	ldr	r0, [pc, #16]	@ (80004cc <main+0x34>)
 80004ba:	f002 fa1e 	bl	80028fa <HAL_UART_Transmit>
HAL_Delay(100);
 80004be:	2064      	movs	r0, #100	@ 0x64
 80004c0:	f000 fb18 	bl	8000af4 <HAL_Delay>
	HAL_UART_Transmit(&huart2, txBuffer, sizeof(txBuffer), 1000);
 80004c4:	bf00      	nop
 80004c6:	e7f3      	b.n	80004b0 <main+0x18>
 80004c8:	20000000 	.word	0x20000000
 80004cc:	200000c4 	.word	0x200000c4

080004d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b09a      	sub	sp, #104	@ 0x68
 80004d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d6:	f107 0320 	add.w	r3, r7, #32
 80004da:	2248      	movs	r2, #72	@ 0x48
 80004dc:	2100      	movs	r1, #0
 80004de:	4618      	mov	r0, r3
 80004e0:	f003 fbc0 	bl	8003c64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e4:	1d3b      	adds	r3, r7, #4
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
 80004f0:	611a      	str	r2, [r3, #16]
 80004f2:	615a      	str	r2, [r3, #20]
 80004f4:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004f6:	4b25      	ldr	r3, [pc, #148]	@ (800058c <SystemClock_Config+0xbc>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80004fe:	4a23      	ldr	r2, [pc, #140]	@ (800058c <SystemClock_Config+0xbc>)
 8000500:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000504:	6013      	str	r3, [r2, #0]
 8000506:	4b21      	ldr	r3, [pc, #132]	@ (800058c <SystemClock_Config+0xbc>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800050e:	603b      	str	r3, [r7, #0]
 8000510:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000512:	2302      	movs	r3, #2
 8000514:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000516:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800051a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800051c:	2340      	movs	r3, #64	@ 0x40
 800051e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000520:	2302      	movs	r3, #2
 8000522:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000524:	2302      	movs	r3, #2
 8000526:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000528:	2300      	movs	r3, #0
 800052a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 6;
 800052c:	2306      	movs	r3, #6
 800052e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000530:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000534:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000536:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800053a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800053c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000540:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	4618      	mov	r0, r3
 8000548:	f001 f90a 	bl	8001760 <HAL_RCC_OscConfig>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000552:	f000 f90f 	bl	8000774 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000556:	234f      	movs	r3, #79	@ 0x4f
 8000558:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800055a:	2303      	movs	r3, #3
 800055c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055e:	2300      	movs	r3, #0
 8000560:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000562:	2300      	movs	r3, #0
 8000564:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000566:	2300      	movs	r3, #0
 8000568:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800056a:	2300      	movs	r3, #0
 800056c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	2102      	movs	r1, #2
 8000572:	4618      	mov	r0, r3
 8000574:	f001 fc76 	bl	8001e64 <HAL_RCC_ClockConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800057e:	f000 f8f9 	bl	8000774 <Error_Handler>
  }
}
 8000582:	bf00      	nop
 8000584:	3768      	adds	r7, #104	@ 0x68
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	58000400 	.word	0x58000400

08000590 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000594:	4b22      	ldr	r3, [pc, #136]	@ (8000620 <MX_USART1_UART_Init+0x90>)
 8000596:	4a23      	ldr	r2, [pc, #140]	@ (8000624 <MX_USART1_UART_Init+0x94>)
 8000598:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800059a:	4b21      	ldr	r3, [pc, #132]	@ (8000620 <MX_USART1_UART_Init+0x90>)
 800059c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000620 <MX_USART1_UART_Init+0x90>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000620 <MX_USART1_UART_Init+0x90>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000620 <MX_USART1_UART_Init+0x90>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000620 <MX_USART1_UART_Init+0x90>)
 80005b6:	220c      	movs	r2, #12
 80005b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ba:	4b19      	ldr	r3, [pc, #100]	@ (8000620 <MX_USART1_UART_Init+0x90>)
 80005bc:	2200      	movs	r2, #0
 80005be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005c0:	4b17      	ldr	r3, [pc, #92]	@ (8000620 <MX_USART1_UART_Init+0x90>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005c6:	4b16      	ldr	r3, [pc, #88]	@ (8000620 <MX_USART1_UART_Init+0x90>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80005cc:	4b14      	ldr	r3, [pc, #80]	@ (8000620 <MX_USART1_UART_Init+0x90>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005d2:	4b13      	ldr	r3, [pc, #76]	@ (8000620 <MX_USART1_UART_Init+0x90>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005d8:	4811      	ldr	r0, [pc, #68]	@ (8000620 <MX_USART1_UART_Init+0x90>)
 80005da:	f002 f93e 	bl	800285a <HAL_UART_Init>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80005e4:	f000 f8c6 	bl	8000774 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80005e8:	2100      	movs	r1, #0
 80005ea:	480d      	ldr	r0, [pc, #52]	@ (8000620 <MX_USART1_UART_Init+0x90>)
 80005ec:	f003 fa72 	bl	8003ad4 <HAL_UARTEx_SetTxFifoThreshold>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80005f6:	f000 f8bd 	bl	8000774 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80005fa:	2100      	movs	r1, #0
 80005fc:	4808      	ldr	r0, [pc, #32]	@ (8000620 <MX_USART1_UART_Init+0x90>)
 80005fe:	f003 faa7 	bl	8003b50 <HAL_UARTEx_SetRxFifoThreshold>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000608:	f000 f8b4 	bl	8000774 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800060c:	4804      	ldr	r0, [pc, #16]	@ (8000620 <MX_USART1_UART_Init+0x90>)
 800060e:	f003 fa29 	bl	8003a64 <HAL_UARTEx_DisableFifoMode>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000618:	f000 f8ac 	bl	8000774 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000030 	.word	0x20000030
 8000624:	40013800 	.word	0x40013800

08000628 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800062c:	4b22      	ldr	r3, [pc, #136]	@ (80006b8 <MX_USART2_UART_Init+0x90>)
 800062e:	4a23      	ldr	r2, [pc, #140]	@ (80006bc <MX_USART2_UART_Init+0x94>)
 8000630:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000632:	4b21      	ldr	r3, [pc, #132]	@ (80006b8 <MX_USART2_UART_Init+0x90>)
 8000634:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000638:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800063a:	4b1f      	ldr	r3, [pc, #124]	@ (80006b8 <MX_USART2_UART_Init+0x90>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000640:	4b1d      	ldr	r3, [pc, #116]	@ (80006b8 <MX_USART2_UART_Init+0x90>)
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000646:	4b1c      	ldr	r3, [pc, #112]	@ (80006b8 <MX_USART2_UART_Init+0x90>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800064c:	4b1a      	ldr	r3, [pc, #104]	@ (80006b8 <MX_USART2_UART_Init+0x90>)
 800064e:	220c      	movs	r2, #12
 8000650:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000652:	4b19      	ldr	r3, [pc, #100]	@ (80006b8 <MX_USART2_UART_Init+0x90>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000658:	4b17      	ldr	r3, [pc, #92]	@ (80006b8 <MX_USART2_UART_Init+0x90>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800065e:	4b16      	ldr	r3, [pc, #88]	@ (80006b8 <MX_USART2_UART_Init+0x90>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000664:	4b14      	ldr	r3, [pc, #80]	@ (80006b8 <MX_USART2_UART_Init+0x90>)
 8000666:	2200      	movs	r2, #0
 8000668:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800066a:	4b13      	ldr	r3, [pc, #76]	@ (80006b8 <MX_USART2_UART_Init+0x90>)
 800066c:	2200      	movs	r2, #0
 800066e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000670:	4811      	ldr	r0, [pc, #68]	@ (80006b8 <MX_USART2_UART_Init+0x90>)
 8000672:	f002 f8f2 	bl	800285a <HAL_UART_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800067c:	f000 f87a 	bl	8000774 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000680:	2100      	movs	r1, #0
 8000682:	480d      	ldr	r0, [pc, #52]	@ (80006b8 <MX_USART2_UART_Init+0x90>)
 8000684:	f003 fa26 	bl	8003ad4 <HAL_UARTEx_SetTxFifoThreshold>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800068e:	f000 f871 	bl	8000774 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000692:	2100      	movs	r1, #0
 8000694:	4808      	ldr	r0, [pc, #32]	@ (80006b8 <MX_USART2_UART_Init+0x90>)
 8000696:	f003 fa5b 	bl	8003b50 <HAL_UARTEx_SetRxFifoThreshold>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80006a0:	f000 f868 	bl	8000774 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80006a4:	4804      	ldr	r0, [pc, #16]	@ (80006b8 <MX_USART2_UART_Init+0x90>)
 80006a6:	f003 f9dd 	bl	8003a64 <HAL_UARTEx_DisableFifoMode>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80006b0:	f000 f860 	bl	8000774 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	200000c4 	.word	0x200000c4
 80006bc:	40004400 	.word	0x40004400

080006c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b086      	sub	sp, #24
 80006c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d4:	2001      	movs	r0, #1
 80006d6:	f7ff fec7 	bl	8000468 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006da:	2002      	movs	r0, #2
 80006dc:	f7ff fec4 	bl	8000468 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e0:	2004      	movs	r0, #4
 80006e2:	f7ff fec1 	bl	8000468 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	f44f 410a 	mov.w	r1, #35328	@ 0x8a00
 80006ec:	481f      	ldr	r0, [pc, #124]	@ (800076c <MX_GPIO_Init+0xac>)
 80006ee:	f000 fd4d 	bl	800118c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2138      	movs	r1, #56	@ 0x38
 80006f6:	481e      	ldr	r0, [pc, #120]	@ (8000770 <MX_GPIO_Init+0xb0>)
 80006f8:	f000 fd48 	bl	800118c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80006fc:	f44f 430a 	mov.w	r3, #35328	@ 0x8a00
 8000700:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000702:	2301      	movs	r3, #1
 8000704:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800070a:	2302      	movs	r3, #2
 800070c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	4619      	mov	r1, r3
 8000712:	4816      	ldr	r0, [pc, #88]	@ (800076c <MX_GPIO_Init+0xac>)
 8000714:	f000 fbda 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 8000718:	2338      	movs	r3, #56	@ 0x38
 800071a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071c:	2301      	movs	r3, #1
 800071e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000724:	2303      	movs	r3, #3
 8000726:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	4619      	mov	r1, r3
 800072c:	4810      	ldr	r0, [pc, #64]	@ (8000770 <MX_GPIO_Init+0xb0>)
 800072e:	f000 fbcd 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin B2_Pin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 8000732:	2303      	movs	r3, #3
 8000734:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000736:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800073a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800073c:	2301      	movs	r3, #1
 800073e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	4619      	mov	r1, r3
 8000744:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000748:	f000 fbc0 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 800074c:	2340      	movs	r3, #64	@ 0x40
 800074e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000750:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000754:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000756:	2301      	movs	r3, #1
 8000758:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	4619      	mov	r1, r3
 800075e:	4804      	ldr	r0, [pc, #16]	@ (8000770 <MX_GPIO_Init+0xb0>)
 8000760:	f000 fbb4 	bl	8000ecc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000764:	bf00      	nop
 8000766:	3718      	adds	r7, #24
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	48000400 	.word	0x48000400
 8000770:	48000800 	.word	0x48000800

08000774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000778:	b672      	cpsid	i
}
 800077a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800077c:	bf00      	nop
 800077e:	e7fd      	b.n	800077c <Error_Handler+0x8>

08000780 <LL_AHB2_GRP1_EnableClock>:
{
 8000780:	b480      	push	{r7}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000788:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800078c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800078e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4313      	orrs	r3, r2
 8000796:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000798:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800079c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4013      	ands	r3, r2
 80007a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007a4:	68fb      	ldr	r3, [r7, #12]
}
 80007a6:	bf00      	nop
 80007a8:	3714      	adds	r7, #20
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr

080007b0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80007b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80007be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4313      	orrs	r3, r2
 80007c6:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80007c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4013      	ands	r3, r2
 80007d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007d4:	68fb      	ldr	r3, [r7, #12]
}
 80007d6:	bf00      	nop
 80007d8:	3714      	adds	r7, #20
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr

080007e0 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80007e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007ec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80007ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4313      	orrs	r3, r2
 80007f6:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80007f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007fc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4013      	ands	r3, r2
 8000802:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000804:	68fb      	ldr	r3, [r7, #12]
}
 8000806:	bf00      	nop
 8000808:	3714      	adds	r7, #20
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr

08000810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr

0800081c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b096      	sub	sp, #88	@ 0x58
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000824:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	2238      	movs	r2, #56	@ 0x38
 800083a:	2100      	movs	r1, #0
 800083c:	4618      	mov	r0, r3
 800083e:	f003 fa11 	bl	8003c64 <memset>
  if(huart->Instance==USART1)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a35      	ldr	r2, [pc, #212]	@ (800091c <HAL_UART_MspInit+0x100>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d12e      	bne.n	80008aa <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800084c:	2301      	movs	r3, #1
 800084e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000850:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000854:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000856:	f107 030c 	add.w	r3, r7, #12
 800085a:	4618      	mov	r0, r3
 800085c:	f001 fec2 	bl	80025e4 <HAL_RCCEx_PeriphCLKConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000866:	f7ff ff85 	bl	8000774 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800086a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800086e:	f7ff ffb7 	bl	80007e0 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000872:	2002      	movs	r0, #2
 8000874:	f7ff ff84 	bl	8000780 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000878:	23c0      	movs	r3, #192	@ 0xc0
 800087a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2302      	movs	r3, #2
 800087e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2300      	movs	r3, #0
 8000886:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000888:	2307      	movs	r3, #7
 800088a:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000890:	4619      	mov	r1, r3
 8000892:	4823      	ldr	r0, [pc, #140]	@ (8000920 <HAL_UART_MspInit+0x104>)
 8000894:	f000 fb1a 	bl	8000ecc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000898:	2200      	movs	r2, #0
 800089a:	2100      	movs	r1, #0
 800089c:	2024      	movs	r0, #36	@ 0x24
 800089e:	f000 fa24 	bl	8000cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008a2:	2024      	movs	r0, #36	@ 0x24
 80008a4:	f000 fa3b 	bl	8000d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008a8:	e033      	b.n	8000912 <HAL_UART_MspInit+0xf6>
  else if(huart->Instance==USART2)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a1d      	ldr	r2, [pc, #116]	@ (8000924 <HAL_UART_MspInit+0x108>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d12e      	bne.n	8000912 <HAL_UART_MspInit+0xf6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008b4:	2302      	movs	r3, #2
 80008b6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008b8:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 80008bc:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008be:	f107 030c 	add.w	r3, r7, #12
 80008c2:	4618      	mov	r0, r3
 80008c4:	f001 fe8e 	bl	80025e4 <HAL_RCCEx_PeriphCLKConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <HAL_UART_MspInit+0xb6>
      Error_Handler();
 80008ce:	f7ff ff51 	bl	8000774 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80008d2:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80008d6:	f7ff ff6b 	bl	80007b0 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	2001      	movs	r0, #1
 80008dc:	f7ff ff50 	bl	8000780 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 80008e0:	230c      	movs	r3, #12
 80008e2:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e4:	2302      	movs	r3, #2
 80008e6:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008f0:	2307      	movs	r3, #7
 80008f2:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80008f8:	4619      	mov	r1, r3
 80008fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008fe:	f000 fae5 	bl	8000ecc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2100      	movs	r1, #0
 8000906:	2025      	movs	r0, #37	@ 0x25
 8000908:	f000 f9ef 	bl	8000cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800090c:	2025      	movs	r0, #37	@ 0x25
 800090e:	f000 fa06 	bl	8000d1e <HAL_NVIC_EnableIRQ>
}
 8000912:	bf00      	nop
 8000914:	3758      	adds	r7, #88	@ 0x58
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40013800 	.word	0x40013800
 8000920:	48000400 	.word	0x48000400
 8000924:	40004400 	.word	0x40004400

08000928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <NMI_Handler+0x4>

08000930 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <HardFault_Handler+0x4>

08000938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <MemManage_Handler+0x4>

08000940 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <BusFault_Handler+0x4>

08000948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <UsageFault_Handler+0x4>

08000950 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr

0800095c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr

08000968 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr

08000974 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000978:	f000 f8a0 	bl	8000abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}

08000980 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000984:	4802      	ldr	r0, [pc, #8]	@ (8000990 <USART1_IRQHandler+0x10>)
 8000986:	f002 f83f 	bl	8002a08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000030 	.word	0x20000030

08000994 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000998:	4802      	ldr	r0, [pc, #8]	@ (80009a4 <USART2_IRQHandler+0x10>)
 800099a:	f002 f835 	bl	8002a08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	200000c4 	.word	0x200000c4

080009a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr

080009b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009b4:	480d      	ldr	r0, [pc, #52]	@ (80009ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009b6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80009b8:	f7ff fff6 	bl	80009a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009bc:	480c      	ldr	r0, [pc, #48]	@ (80009f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80009be:	490d      	ldr	r1, [pc, #52]	@ (80009f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009c0:	4a0d      	ldr	r2, [pc, #52]	@ (80009f8 <LoopForever+0xe>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c4:	e002      	b.n	80009cc <LoopCopyDataInit>

080009c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ca:	3304      	adds	r3, #4

080009cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d0:	d3f9      	bcc.n	80009c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d2:	4a0a      	ldr	r2, [pc, #40]	@ (80009fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80009d4:	4c0a      	ldr	r4, [pc, #40]	@ (8000a00 <LoopForever+0x16>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d8:	e001      	b.n	80009de <LoopFillZerobss>

080009da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009dc:	3204      	adds	r2, #4

080009de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e0:	d3fb      	bcc.n	80009da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009e2:	f003 f947 	bl	8003c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009e6:	f7ff fd57 	bl	8000498 <main>

080009ea <LoopForever>:

LoopForever:
    b LoopForever
 80009ea:	e7fe      	b.n	80009ea <LoopForever>
  ldr   r0, =_estack
 80009ec:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80009f8:	08003dc8 	.word	0x08003dc8
  ldr r2, =_sbss
 80009fc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000a00:	2000015c 	.word	0x2000015c

08000a04 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a04:	e7fe      	b.n	8000a04 <ADC_IRQHandler>
	...

08000a08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a12:	2003      	movs	r0, #3
 8000a14:	f000 f95e 	bl	8000cd4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000a18:	f001 fc06 	bl	8002228 <HAL_RCC_GetHCLKFreq>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	4a09      	ldr	r2, [pc, #36]	@ (8000a44 <HAL_Init+0x3c>)
 8000a20:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a22:	2000      	movs	r0, #0
 8000a24:	f000 f810 	bl	8000a48 <HAL_InitTick>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d002      	beq.n	8000a34 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	71fb      	strb	r3, [r7, #7]
 8000a32:	e001      	b.n	8000a38 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a34:	f7ff feec 	bl	8000810 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a38:	79fb      	ldrb	r3, [r7, #7]
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000008 	.word	0x20000008

08000a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a50:	2300      	movs	r3, #0
 8000a52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a54:	4b17      	ldr	r3, [pc, #92]	@ (8000ab4 <HAL_InitTick+0x6c>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d024      	beq.n	8000aa6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a5c:	f001 fbe4 	bl	8002228 <HAL_RCC_GetHCLKFreq>
 8000a60:	4602      	mov	r2, r0
 8000a62:	4b14      	ldr	r3, [pc, #80]	@ (8000ab4 <HAL_InitTick+0x6c>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	4619      	mov	r1, r3
 8000a68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a74:	4618      	mov	r0, r3
 8000a76:	f000 f960 	bl	8000d3a <HAL_SYSTICK_Config>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d10f      	bne.n	8000aa0 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2b0f      	cmp	r3, #15
 8000a84:	d809      	bhi.n	8000a9a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a86:	2200      	movs	r2, #0
 8000a88:	6879      	ldr	r1, [r7, #4]
 8000a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8e:	f000 f92c 	bl	8000cea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a92:	4a09      	ldr	r2, [pc, #36]	@ (8000ab8 <HAL_InitTick+0x70>)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6013      	str	r3, [r2, #0]
 8000a98:	e007      	b.n	8000aaa <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	73fb      	strb	r3, [r7, #15]
 8000a9e:	e004      	b.n	8000aaa <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	73fb      	strb	r3, [r7, #15]
 8000aa4:	e001      	b.n	8000aaa <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000010 	.word	0x20000010
 8000ab8:	2000000c 	.word	0x2000000c

08000abc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ac0:	4b05      	ldr	r3, [pc, #20]	@ (8000ad8 <HAL_IncTick+0x1c>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b05      	ldr	r3, [pc, #20]	@ (8000adc <HAL_IncTick+0x20>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4413      	add	r3, r2
 8000acc:	4a03      	ldr	r2, [pc, #12]	@ (8000adc <HAL_IncTick+0x20>)
 8000ace:	6013      	str	r3, [r2, #0]
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr
 8000ad8:	20000010 	.word	0x20000010
 8000adc:	20000158 	.word	0x20000158

08000ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae4:	4b02      	ldr	r3, [pc, #8]	@ (8000af0 <HAL_GetTick+0x10>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr
 8000af0:	20000158 	.word	0x20000158

08000af4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000afc:	f7ff fff0 	bl	8000ae0 <HAL_GetTick>
 8000b00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b0c:	d005      	beq.n	8000b1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b38 <HAL_Delay+0x44>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	461a      	mov	r2, r3
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	4413      	add	r3, r2
 8000b18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b1a:	bf00      	nop
 8000b1c:	f7ff ffe0 	bl	8000ae0 <HAL_GetTick>
 8000b20:	4602      	mov	r2, r0
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	68fa      	ldr	r2, [r7, #12]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d8f7      	bhi.n	8000b1c <HAL_Delay+0x28>
  {
  }
}
 8000b2c:	bf00      	nop
 8000b2e:	bf00      	nop
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000010 	.word	0x20000010

08000b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b80 <__NVIC_SetPriorityGrouping+0x44>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b52:	68ba      	ldr	r2, [r7, #8]
 8000b54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b58:	4013      	ands	r3, r2
 8000b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b6e:	4a04      	ldr	r2, [pc, #16]	@ (8000b80 <__NVIC_SetPriorityGrouping+0x44>)
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	60d3      	str	r3, [r2, #12]
}
 8000b74:	bf00      	nop
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b88:	4b04      	ldr	r3, [pc, #16]	@ (8000b9c <__NVIC_GetPriorityGrouping+0x18>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	0a1b      	lsrs	r3, r3, #8
 8000b8e:	f003 0307 	and.w	r3, r3, #7
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	db0b      	blt.n	8000bca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	f003 021f 	and.w	r2, r3, #31
 8000bb8:	4906      	ldr	r1, [pc, #24]	@ (8000bd4 <__NVIC_EnableIRQ+0x34>)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	095b      	lsrs	r3, r3, #5
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr
 8000bd4:	e000e100 	.word	0xe000e100

08000bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	6039      	str	r1, [r7, #0]
 8000be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	db0a      	blt.n	8000c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	490c      	ldr	r1, [pc, #48]	@ (8000c24 <__NVIC_SetPriority+0x4c>)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	0112      	lsls	r2, r2, #4
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	440b      	add	r3, r1
 8000bfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c00:	e00a      	b.n	8000c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	4908      	ldr	r1, [pc, #32]	@ (8000c28 <__NVIC_SetPriority+0x50>)
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	f003 030f 	and.w	r3, r3, #15
 8000c0e:	3b04      	subs	r3, #4
 8000c10:	0112      	lsls	r2, r2, #4
 8000c12:	b2d2      	uxtb	r2, r2
 8000c14:	440b      	add	r3, r1
 8000c16:	761a      	strb	r2, [r3, #24]
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000e100 	.word	0xe000e100
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b089      	sub	sp, #36	@ 0x24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	f1c3 0307 	rsb	r3, r3, #7
 8000c46:	2b04      	cmp	r3, #4
 8000c48:	bf28      	it	cs
 8000c4a:	2304      	movcs	r3, #4
 8000c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3304      	adds	r3, #4
 8000c52:	2b06      	cmp	r3, #6
 8000c54:	d902      	bls.n	8000c5c <NVIC_EncodePriority+0x30>
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	3b03      	subs	r3, #3
 8000c5a:	e000      	b.n	8000c5e <NVIC_EncodePriority+0x32>
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c60:	f04f 32ff 	mov.w	r2, #4294967295
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43da      	mvns	r2, r3
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	401a      	ands	r2, r3
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c74:	f04f 31ff 	mov.w	r1, #4294967295
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7e:	43d9      	mvns	r1, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	4313      	orrs	r3, r2
         );
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3724      	adds	r7, #36	@ 0x24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr

08000c90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ca0:	d301      	bcc.n	8000ca6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e00f      	b.n	8000cc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd0 <SysTick_Config+0x40>)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cae:	210f      	movs	r1, #15
 8000cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb4:	f7ff ff90 	bl	8000bd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb8:	4b05      	ldr	r3, [pc, #20]	@ (8000cd0 <SysTick_Config+0x40>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cbe:	4b04      	ldr	r3, [pc, #16]	@ (8000cd0 <SysTick_Config+0x40>)
 8000cc0:	2207      	movs	r2, #7
 8000cc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	e000e010 	.word	0xe000e010

08000cd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff ff2d 	bl	8000b3c <__NVIC_SetPriorityGrouping>
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b086      	sub	sp, #24
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
 8000cf6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf8:	f7ff ff44 	bl	8000b84 <__NVIC_GetPriorityGrouping>
 8000cfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	68b9      	ldr	r1, [r7, #8]
 8000d02:	6978      	ldr	r0, [r7, #20]
 8000d04:	f7ff ff92 	bl	8000c2c <NVIC_EncodePriority>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d0e:	4611      	mov	r1, r2
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff ff61 	bl	8000bd8 <__NVIC_SetPriority>
}
 8000d16:	bf00      	nop
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	4603      	mov	r3, r0
 8000d26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff37 	bl	8000ba0 <__NVIC_EnableIRQ>
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f7ff ffa4 	bl	8000c90 <SysTick_Config>
 8000d48:	4603      	mov	r3, r0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d52:	b480      	push	{r7}
 8000d54:	b083      	sub	sp, #12
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d101      	bne.n	8000d64 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000d60:	2301      	movs	r3, #1
 8000d62:	e04f      	b.n	8000e04 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d008      	beq.n	8000d82 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2204      	movs	r2, #4
 8000d74:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e040      	b.n	8000e04 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f022 020e 	bic.w	r2, r2, #14
 8000d90:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000da0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f022 0201 	bic.w	r2, r2, #1
 8000db0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000db6:	f003 021c 	and.w	r2, r3, #28
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000dce:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d00c      	beq.n	8000df2 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000de2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000de6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000df0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2201      	movs	r2, #1
 8000df6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8000e02:	2300      	movs	r3, #0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr

08000e0e <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b084      	sub	sp, #16
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e16:	2300      	movs	r3, #0
 8000e18:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d005      	beq.n	8000e32 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2204      	movs	r2, #4
 8000e2a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	73fb      	strb	r3, [r7, #15]
 8000e30:	e047      	b.n	8000ec2 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f022 020e 	bic.w	r2, r2, #14
 8000e40:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f022 0201 	bic.w	r2, r2, #1
 8000e50:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000e60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e66:	f003 021c 	and.w	r2, r3, #28
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fa01 f202 	lsl.w	r2, r1, r2
 8000e74:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000e7e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d00c      	beq.n	8000ea2 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e92:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000e96:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000ea0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d003      	beq.n	8000ec2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	4798      	blx	r3
    }
  }
  return status;
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b087      	sub	sp, #28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eda:	e140      	b.n	800115e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee8:	4013      	ands	r3, r2
 8000eea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f000 8132 	beq.w	8001158 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 0303 	and.w	r3, r3, #3
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d005      	beq.n	8000f0c <HAL_GPIO_Init+0x40>
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f003 0303 	and.w	r3, r3, #3
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d130      	bne.n	8000f6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	2203      	movs	r2, #3
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	68da      	ldr	r2, [r3, #12]
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f42:	2201      	movs	r2, #1
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	091b      	lsrs	r3, r3, #4
 8000f58:	f003 0201 	and.w	r2, r3, #1
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f003 0303 	and.w	r3, r3, #3
 8000f76:	2b03      	cmp	r3, #3
 8000f78:	d017      	beq.n	8000faa <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	2203      	movs	r2, #3
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	689a      	ldr	r2, [r3, #8]
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 0303 	and.w	r3, r3, #3
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d123      	bne.n	8000ffe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	08da      	lsrs	r2, r3, #3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3208      	adds	r2, #8
 8000fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	220f      	movs	r2, #15
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	691a      	ldr	r2, [r3, #16]
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	f003 0307 	and.w	r3, r3, #7
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	08da      	lsrs	r2, r3, #3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3208      	adds	r2, #8
 8000ff8:	6939      	ldr	r1, [r7, #16]
 8000ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	2203      	movs	r2, #3
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 0203 	and.w	r2, r3, #3
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800103a:	2b00      	cmp	r3, #0
 800103c:	f000 808c 	beq.w	8001158 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001040:	4a4e      	ldr	r2, [pc, #312]	@ (800117c <HAL_GPIO_Init+0x2b0>)
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	089b      	lsrs	r3, r3, #2
 8001046:	3302      	adds	r3, #2
 8001048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800104c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	f003 0303 	and.w	r3, r3, #3
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	2207      	movs	r2, #7
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800106a:	d00d      	beq.n	8001088 <HAL_GPIO_Init+0x1bc>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a44      	ldr	r2, [pc, #272]	@ (8001180 <HAL_GPIO_Init+0x2b4>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d007      	beq.n	8001084 <HAL_GPIO_Init+0x1b8>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a43      	ldr	r2, [pc, #268]	@ (8001184 <HAL_GPIO_Init+0x2b8>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d101      	bne.n	8001080 <HAL_GPIO_Init+0x1b4>
 800107c:	2302      	movs	r3, #2
 800107e:	e004      	b.n	800108a <HAL_GPIO_Init+0x1be>
 8001080:	2307      	movs	r3, #7
 8001082:	e002      	b.n	800108a <HAL_GPIO_Init+0x1be>
 8001084:	2301      	movs	r3, #1
 8001086:	e000      	b.n	800108a <HAL_GPIO_Init+0x1be>
 8001088:	2300      	movs	r3, #0
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	f002 0203 	and.w	r2, r2, #3
 8001090:	0092      	lsls	r2, r2, #2
 8001092:	4093      	lsls	r3, r2
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4313      	orrs	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800109a:	4938      	ldr	r1, [pc, #224]	@ (800117c <HAL_GPIO_Init+0x2b0>)
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	089b      	lsrs	r3, r3, #2
 80010a0:	3302      	adds	r3, #2
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010a8:	4b37      	ldr	r3, [pc, #220]	@ (8001188 <HAL_GPIO_Init+0x2bc>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4013      	ands	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010cc:	4a2e      	ldr	r2, [pc, #184]	@ (8001188 <HAL_GPIO_Init+0x2bc>)
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80010d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001188 <HAL_GPIO_Init+0x2bc>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	43db      	mvns	r3, r3
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	4013      	ands	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010f6:	4a24      	ldr	r2, [pc, #144]	@ (8001188 <HAL_GPIO_Init+0x2bc>)
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80010fc:	4b22      	ldr	r3, [pc, #136]	@ (8001188 <HAL_GPIO_Init+0x2bc>)
 80010fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001102:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	43db      	mvns	r3, r3
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4013      	ands	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4313      	orrs	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001122:	4a19      	ldr	r2, [pc, #100]	@ (8001188 <HAL_GPIO_Init+0x2bc>)
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800112a:	4b17      	ldr	r3, [pc, #92]	@ (8001188 <HAL_GPIO_Init+0x2bc>)
 800112c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001130:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	43db      	mvns	r3, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d003      	beq.n	8001150 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001150:	4a0d      	ldr	r2, [pc, #52]	@ (8001188 <HAL_GPIO_Init+0x2bc>)
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	3301      	adds	r3, #1
 800115c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	fa22 f303 	lsr.w	r3, r2, r3
 8001168:	2b00      	cmp	r3, #0
 800116a:	f47f aeb7 	bne.w	8000edc <HAL_GPIO_Init+0x10>
  }
}
 800116e:	bf00      	nop
 8001170:	bf00      	nop
 8001172:	371c      	adds	r7, #28
 8001174:	46bd      	mov	sp, r7
 8001176:	bc80      	pop	{r7}
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40010000 	.word	0x40010000
 8001180:	48000400 	.word	0x48000400
 8001184:	48000800 	.word	0x48000800
 8001188:	58000800 	.word	0x58000800

0800118c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	807b      	strh	r3, [r7, #2]
 8001198:	4613      	mov	r3, r2
 800119a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800119c:	787b      	ldrb	r3, [r7, #1]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011a2:	887a      	ldrh	r2, [r7, #2]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011a8:	e002      	b.n	80011b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011aa:	887a      	ldrh	r2, [r7, #2]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr
	...

080011bc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011c0:	4b04      	ldr	r3, [pc, #16]	@ (80011d4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a03      	ldr	r2, [pc, #12]	@ (80011d4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80011c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011ca:	6013      	str	r3, [r2, #0]
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr
 80011d4:	58000400 	.word	0x58000400

080011d8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80011dc:	4b03      	ldr	r3, [pc, #12]	@ (80011ec <HAL_PWREx_GetVoltageRange+0x14>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr
 80011ec:	58000400 	.word	0x58000400

080011f0 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80011f4:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001200:	d101      	bne.n	8001206 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001202:	2301      	movs	r3, #1
 8001204:	e000      	b.n	8001208 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr
 8001210:	58000400 	.word	0x58000400

08001214 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001218:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001222:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001226:	6013      	str	r3, [r2, #0]
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr

08001230 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001234:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800123e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001242:	6013      	str	r3, [r2, #0]
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr

0800124c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001250:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800125a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800125e:	d101      	bne.n	8001264 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001260:	2301      	movs	r3, #1
 8001262:	e000      	b.n	8001266 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr

0800126e <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001272:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800127c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001280:	6013      	str	r3, [r2, #0]
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr

0800128a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800128e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001298:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800129c:	6013      	str	r3, [r2, #0]
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr

080012a6 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80012aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80012b8:	d101      	bne.n	80012be <LL_RCC_HSE_IsReady+0x18>
 80012ba:	2301      	movs	r3, #1
 80012bc:	e000      	b.n	80012c0 <LL_RCC_HSE_IsReady+0x1a>
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80012cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012da:	6013      	str	r3, [r2, #0]
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr

080012e4 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80012e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80012f6:	6013      	str	r3, [r2, #0]
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr

08001300 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001304:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800130e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001312:	d101      	bne.n	8001318 <LL_RCC_HSI_IsReady+0x18>
 8001314:	2301      	movs	r3, #1
 8001316:	e000      	b.n	800131a <LL_RCC_HSI_IsReady+0x1a>
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr

08001322 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800132a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	061b      	lsls	r3, r3, #24
 8001338:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800133c:	4313      	orrs	r3, r2
 800133e:	604b      	str	r3, [r1, #4]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr

0800134a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800134e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b02      	cmp	r3, #2
 800135c:	d101      	bne.n	8001362 <LL_RCC_LSE_IsReady+0x18>
 800135e:	2301      	movs	r3, #1
 8001360:	e000      	b.n	8001364 <LL_RCC_LSE_IsReady+0x1a>
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr

0800136c <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001370:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001374:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001378:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr

0800138c <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001390:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001394:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001398:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800139c:	f023 0301 	bic.w	r3, r3, #1
 80013a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr

080013ac <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80013b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d101      	bne.n	80013c4 <LL_RCC_LSI_IsReady+0x18>
 80013c0:	2301      	movs	r3, #1
 80013c2:	e000      	b.n	80013c6 <LL_RCC_LSI_IsReady+0x1a>
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr

080013ce <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80013d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6013      	str	r3, [r2, #0]
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr

080013ea <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80013ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80013f8:	f023 0301 	bic.w	r3, r3, #1
 80013fc:	6013      	str	r3, [r2, #0]
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr

08001406 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800140a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b02      	cmp	r3, #2
 8001416:	d101      	bne.n	800141c <LL_RCC_MSI_IsReady+0x16>
 8001418:	2301      	movs	r3, #1
 800141a:	e000      	b.n	800141e <LL_RCC_MSI_IsReady+0x18>
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr

08001426 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800142a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0308 	and.w	r3, r3, #8
 8001434:	2b08      	cmp	r3, #8
 8001436:	d101      	bne.n	800143c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001438:	2301      	movs	r3, #1
 800143a:	e000      	b.n	800143e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr

08001446 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800144a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001454:	4618      	mov	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr

0800145c <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001460:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001464:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001468:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 800146c:	4618      	mov	r0, r3
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr

08001474 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800147c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	021b      	lsls	r3, r3, #8
 800148a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800148e:	4313      	orrs	r3, r2
 8001490:	604b      	str	r3, [r1, #4]
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr

0800149c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80014a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f023 0203 	bic.w	r2, r3, #3
 80014ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	608b      	str	r3, [r1, #8]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr

080014c2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80014c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f003 030c 	and.w	r3, r3, #12
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr

080014d8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80014e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	608b      	str	r3, [r1, #8]
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr

080014fe <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001506:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800150a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800150e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001512:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4313      	orrs	r3, r2
 800151a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr

08001528 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001530:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001534:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001538:	f023 020f 	bic.w	r2, r3, #15
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	091b      	lsrs	r3, r3, #4
 8001540:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001544:	4313      	orrs	r3, r2
 8001546:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr

08001554 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800155c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001566:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4313      	orrs	r3, r2
 800156e:	608b      	str	r3, [r1, #8]
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr

0800157a <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001582:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800158c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4313      	orrs	r3, r2
 8001594:	608b      	str	r3, [r1, #8]
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr

080015a0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80015a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr

080015b6 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80015ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015be:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80015c2:	011b      	lsls	r3, r3, #4
 80015c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr

080015d0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80015d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80015de:	4618      	mov	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr

080015e6 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80015ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr

080015fc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001600:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800160a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800160e:	6013      	str	r3, [r2, #0]
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr

08001618 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800161c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001626:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800162a:	6013      	str	r3, [r2, #0]
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr

08001634 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001638:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001642:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001646:	d101      	bne.n	800164c <LL_RCC_PLL_IsReady+0x18>
 8001648:	2301      	movs	r3, #1
 800164a:	e000      	b.n	800164e <LL_RCC_PLL_IsReady+0x1a>
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr

08001656 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800165a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	0a1b      	lsrs	r3, r3, #8
 8001662:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001666:	4618      	mov	r0, r3
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr

0800166e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001672:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800167c:	4618      	mov	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr

08001684 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001688:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8001692:	4618      	mov	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr

0800169a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800169e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	f003 0303 	and.w	r3, r3, #3
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr

080016b0 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80016b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016c2:	d101      	bne.n	80016c8 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80016c4:	2301      	movs	r3, #1
 80016c6:	e000      	b.n	80016ca <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr

080016d2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80016d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016da:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80016de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80016e6:	d101      	bne.n	80016ec <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80016e8:	2301      	movs	r3, #1
 80016ea:	e000      	b.n	80016ee <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr

080016f6 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80016fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001702:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001706:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800170a:	d101      	bne.n	8001710 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800170c:	2301      	movs	r3, #1
 800170e:	e000      	b.n	8001712 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr

0800171a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800171e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001728:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800172c:	d101      	bne.n	8001732 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800172e:	2301      	movs	r3, #1
 8001730:	e000      	b.n	8001734 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr

0800173c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001740:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800174a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800174e:	d101      	bne.n	8001754 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001750:	2301      	movs	r3, #1
 8001752:	e000      	b.n	8001756 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr
	...

08001760 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e36f      	b.n	8001e52 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001772:	f7ff fea6 	bl	80014c2 <LL_RCC_GetSysClkSource>
 8001776:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001778:	f7ff ff8f 	bl	800169a <LL_RCC_PLL_GetMainSource>
 800177c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0320 	and.w	r3, r3, #32
 8001786:	2b00      	cmp	r3, #0
 8001788:	f000 80c4 	beq.w	8001914 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d005      	beq.n	800179e <HAL_RCC_OscConfig+0x3e>
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	2b0c      	cmp	r3, #12
 8001796:	d176      	bne.n	8001886 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d173      	bne.n	8001886 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a1b      	ldr	r3, [r3, #32]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e353      	b.n	8001e52 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0308 	and.w	r3, r3, #8
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_RCC_OscConfig+0x68>
 80017bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017c6:	e006      	b.n	80017d6 <HAL_RCC_OscConfig+0x76>
 80017c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017d0:	091b      	lsrs	r3, r3, #4
 80017d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d222      	bcs.n	8001820 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 fd5a 	bl	8002298 <RCC_SetFlashLatencyFromMSIRange>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e331      	b.n	8001e52 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017f8:	f043 0308 	orr.w	r3, r3, #8
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800180c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001810:	4313      	orrs	r3, r2
 8001812:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff fe2b 	bl	8001474 <LL_RCC_MSI_SetCalibTrimming>
 800181e:	e021      	b.n	8001864 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001820:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800182a:	f043 0308 	orr.w	r3, r3, #8
 800182e:	6013      	str	r3, [r2, #0]
 8001830:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800183e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001842:	4313      	orrs	r3, r2
 8001844:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fe12 	bl	8001474 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001854:	4618      	mov	r0, r3
 8001856:	f000 fd1f 	bl	8002298 <RCC_SetFlashLatencyFromMSIRange>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e2f6      	b.n	8001e52 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001864:	f000 fce0 	bl	8002228 <HAL_RCC_GetHCLKFreq>
 8001868:	4603      	mov	r3, r0
 800186a:	4aa7      	ldr	r2, [pc, #668]	@ (8001b08 <HAL_RCC_OscConfig+0x3a8>)
 800186c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800186e:	4ba7      	ldr	r3, [pc, #668]	@ (8001b0c <HAL_RCC_OscConfig+0x3ac>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff f8e8 	bl	8000a48 <HAL_InitTick>
 8001878:	4603      	mov	r3, r0
 800187a:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800187c:	7cfb      	ldrb	r3, [r7, #19]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d047      	beq.n	8001912 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001882:	7cfb      	ldrb	r3, [r7, #19]
 8001884:	e2e5      	b.n	8001e52 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d02c      	beq.n	80018e8 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800188e:	f7ff fd9e 	bl	80013ce <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001892:	f7ff f925 	bl	8000ae0 <HAL_GetTick>
 8001896:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800189a:	f7ff f921 	bl	8000ae0 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e2d2      	b.n	8001e52 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80018ac:	f7ff fdab 	bl	8001406 <LL_RCC_MSI_IsReady>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0f1      	beq.n	800189a <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018c0:	f043 0308 	orr.w	r3, r3, #8
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018d8:	4313      	orrs	r3, r2
 80018da:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fdc7 	bl	8001474 <LL_RCC_MSI_SetCalibTrimming>
 80018e6:	e015      	b.n	8001914 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018e8:	f7ff fd7f 	bl	80013ea <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018ec:	f7ff f8f8 	bl	8000ae0 <HAL_GetTick>
 80018f0:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018f4:	f7ff f8f4 	bl	8000ae0 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e2a5      	b.n	8001e52 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001906:	f7ff fd7e 	bl	8001406 <LL_RCC_MSI_IsReady>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1f1      	bne.n	80018f4 <HAL_RCC_OscConfig+0x194>
 8001910:	e000      	b.n	8001914 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001912:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	2b00      	cmp	r3, #0
 800191e:	d058      	beq.n	80019d2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	2b08      	cmp	r3, #8
 8001924:	d005      	beq.n	8001932 <HAL_RCC_OscConfig+0x1d2>
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	2b0c      	cmp	r3, #12
 800192a:	d108      	bne.n	800193e <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	2b03      	cmp	r3, #3
 8001930:	d105      	bne.n	800193e <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d14b      	bne.n	80019d2 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e289      	b.n	8001e52 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800193e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001950:	4313      	orrs	r3, r2
 8001952:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800195c:	d102      	bne.n	8001964 <HAL_RCC_OscConfig+0x204>
 800195e:	f7ff fc86 	bl	800126e <LL_RCC_HSE_Enable>
 8001962:	e00d      	b.n	8001980 <HAL_RCC_OscConfig+0x220>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 800196c:	d104      	bne.n	8001978 <HAL_RCC_OscConfig+0x218>
 800196e:	f7ff fc51 	bl	8001214 <LL_RCC_HSE_EnableTcxo>
 8001972:	f7ff fc7c 	bl	800126e <LL_RCC_HSE_Enable>
 8001976:	e003      	b.n	8001980 <HAL_RCC_OscConfig+0x220>
 8001978:	f7ff fc87 	bl	800128a <LL_RCC_HSE_Disable>
 800197c:	f7ff fc58 	bl	8001230 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d012      	beq.n	80019ae <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001988:	f7ff f8aa 	bl	8000ae0 <HAL_GetTick>
 800198c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001990:	f7ff f8a6 	bl	8000ae0 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b64      	cmp	r3, #100	@ 0x64
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e257      	b.n	8001e52 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80019a2:	f7ff fc80 	bl	80012a6 <LL_RCC_HSE_IsReady>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0f1      	beq.n	8001990 <HAL_RCC_OscConfig+0x230>
 80019ac:	e011      	b.n	80019d2 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ae:	f7ff f897 	bl	8000ae0 <HAL_GetTick>
 80019b2:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019b6:	f7ff f893 	bl	8000ae0 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b64      	cmp	r3, #100	@ 0x64
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e244      	b.n	8001e52 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80019c8:	f7ff fc6d 	bl	80012a6 <LL_RCC_HSE_IsReady>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f1      	bne.n	80019b6 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d046      	beq.n	8001a6c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	2b04      	cmp	r3, #4
 80019e2:	d005      	beq.n	80019f0 <HAL_RCC_OscConfig+0x290>
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	2b0c      	cmp	r3, #12
 80019e8:	d10e      	bne.n	8001a08 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d10b      	bne.n	8001a08 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d101      	bne.n	80019fc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e22a      	b.n	8001e52 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	695b      	ldr	r3, [r3, #20]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff fc8e 	bl	8001322 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001a06:	e031      	b.n	8001a6c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d019      	beq.n	8001a44 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a10:	f7ff fc5a 	bl	80012c8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a14:	f7ff f864 	bl	8000ae0 <HAL_GetTick>
 8001a18:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a1c:	f7ff f860 	bl	8000ae0 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e211      	b.n	8001e52 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001a2e:	f7ff fc67 	bl	8001300 <LL_RCC_HSI_IsReady>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0f1      	beq.n	8001a1c <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	695b      	ldr	r3, [r3, #20]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff fc70 	bl	8001322 <LL_RCC_HSI_SetCalibTrimming>
 8001a42:	e013      	b.n	8001a6c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a44:	f7ff fc4e 	bl	80012e4 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a48:	f7ff f84a 	bl	8000ae0 <HAL_GetTick>
 8001a4c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a50:	f7ff f846 	bl	8000ae0 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e1f7      	b.n	8001e52 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001a62:	f7ff fc4d 	bl	8001300 <LL_RCC_HSI_IsReady>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1f1      	bne.n	8001a50 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0308 	and.w	r3, r3, #8
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d06e      	beq.n	8001b56 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d056      	beq.n	8001b2e <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001a80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a88:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69da      	ldr	r2, [r3, #28]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f003 0310 	and.w	r3, r3, #16
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d031      	beq.n	8001afc <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d006      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e1d0      	b.n	8001e52 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d013      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001aba:	f7ff fc67 	bl	800138c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001abe:	f7ff f80f 	bl	8000ae0 <HAL_GetTick>
 8001ac2:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001ac4:	e008      	b.n	8001ad8 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac6:	f7ff f80b 	bl	8000ae0 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b11      	cmp	r3, #17
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e1bc      	b.n	8001e52 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001ad8:	f7ff fc68 	bl	80013ac <LL_RCC_LSI_IsReady>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f1      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001ae2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aea:	f023 0210 	bic.w	r2, r3, #16
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001af6:	4313      	orrs	r3, r2
 8001af8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001afc:	f7ff fc36 	bl	800136c <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b00:	f7fe ffee 	bl	8000ae0 <HAL_GetTick>
 8001b04:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001b06:	e00c      	b.n	8001b22 <HAL_RCC_OscConfig+0x3c2>
 8001b08:	20000008 	.word	0x20000008
 8001b0c:	2000000c 	.word	0x2000000c
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b10:	f7fe ffe6 	bl	8000ae0 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b11      	cmp	r3, #17
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e197      	b.n	8001e52 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001b22:	f7ff fc43 	bl	80013ac <LL_RCC_LSI_IsReady>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0f1      	beq.n	8001b10 <HAL_RCC_OscConfig+0x3b0>
 8001b2c:	e013      	b.n	8001b56 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b2e:	f7ff fc2d 	bl	800138c <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b32:	f7fe ffd5 	bl	8000ae0 <HAL_GetTick>
 8001b36:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b3a:	f7fe ffd1 	bl	8000ae0 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b11      	cmp	r3, #17
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e182      	b.n	8001e52 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001b4c:	f7ff fc2e 	bl	80013ac <LL_RCC_LSI_IsReady>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1f1      	bne.n	8001b3a <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0304 	and.w	r3, r3, #4
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f000 80d8 	beq.w	8001d14 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001b64:	f7ff fb44 	bl	80011f0 <LL_PWR_IsEnabledBkUpAccess>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d113      	bne.n	8001b96 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001b6e:	f7ff fb25 	bl	80011bc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b72:	f7fe ffb5 	bl	8000ae0 <HAL_GetTick>
 8001b76:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b7a:	f7fe ffb1 	bl	8000ae0 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e162      	b.n	8001e52 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001b8c:	f7ff fb30 	bl	80011f0 <LL_PWR_IsEnabledBkUpAccess>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0f1      	beq.n	8001b7a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d07b      	beq.n	8001c96 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	2b85      	cmp	r3, #133	@ 0x85
 8001ba4:	d003      	beq.n	8001bae <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	2b05      	cmp	r3, #5
 8001bac:	d109      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001bae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bb6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bba:	f043 0304 	orr.w	r3, r3, #4
 8001bbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc2:	f7fe ff8d 	bl	8000ae0 <HAL_GetTick>
 8001bc6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001bc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bd0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001bdc:	e00a      	b.n	8001bf4 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bde:	f7fe ff7f 	bl	8000ae0 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e12e      	b.n	8001e52 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001bf4:	f7ff fba9 	bl	800134a <LL_RCC_LSE_IsReady>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d0ef      	beq.n	8001bde <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	2b81      	cmp	r3, #129	@ 0x81
 8001c04:	d003      	beq.n	8001c0e <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	2b85      	cmp	r3, #133	@ 0x85
 8001c0c:	d121      	bne.n	8001c52 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0e:	f7fe ff67 	bl	8000ae0 <HAL_GetTick>
 8001c12:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001c14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001c28:	e00a      	b.n	8001c40 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c2a:	f7fe ff59 	bl	8000ae0 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e108      	b.n	8001e52 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001c40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0ec      	beq.n	8001c2a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001c50:	e060      	b.n	8001d14 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c52:	f7fe ff45 	bl	8000ae0 <HAL_GetTick>
 8001c56:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001c58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001c6c:	e00a      	b.n	8001c84 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c6e:	f7fe ff37 	bl	8000ae0 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e0e6      	b.n	8001e52 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001c84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1ec      	bne.n	8001c6e <HAL_RCC_OscConfig+0x50e>
 8001c94:	e03e      	b.n	8001d14 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c96:	f7fe ff23 	bl	8000ae0 <HAL_GetTick>
 8001c9a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001c9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ca4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ca8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001cac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001cb0:	e00a      	b.n	8001cc8 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb2:	f7fe ff15 	bl	8000ae0 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e0c4      	b.n	8001e52 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001cc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1ec      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd8:	f7fe ff02 	bl	8000ae0 <HAL_GetTick>
 8001cdc:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001cde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ce6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001cea:	f023 0301 	bic.w	r3, r3, #1
 8001cee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001cf2:	e00a      	b.n	8001d0a <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf4:	f7fe fef4 	bl	8000ae0 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e0a3      	b.n	8001e52 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001d0a:	f7ff fb1e 	bl	800134a <LL_RCC_LSE_IsReady>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1ef      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 8099 	beq.w	8001e50 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	2b0c      	cmp	r3, #12
 8001d22:	d06c      	beq.n	8001dfe <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d14b      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2c:	f7ff fc74 	bl	8001618 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d30:	f7fe fed6 	bl	8000ae0 <HAL_GetTick>
 8001d34:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d38:	f7fe fed2 	bl	8000ae0 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b0a      	cmp	r3, #10
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e083      	b.n	8001e52 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001d4a:	f7ff fc73 	bl	8001634 <LL_RCC_PLL_IsReady>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1f1      	bne.n	8001d38 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	4b40      	ldr	r3, [pc, #256]	@ (8001e5c <HAL_RCC_OscConfig+0x6fc>)
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001d66:	4311      	orrs	r1, r2
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001d6c:	0212      	lsls	r2, r2, #8
 8001d6e:	4311      	orrs	r1, r2
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001d74:	4311      	orrs	r1, r2
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001d7a:	4311      	orrs	r1, r2
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001d80:	430a      	orrs	r2, r1
 8001d82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d86:	4313      	orrs	r3, r2
 8001d88:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d8a:	f7ff fc37 	bl	80015fc <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d9c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9e:	f7fe fe9f 	bl	8000ae0 <HAL_GetTick>
 8001da2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da6:	f7fe fe9b 	bl	8000ae0 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b0a      	cmp	r3, #10
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e04c      	b.n	8001e52 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001db8:	f7ff fc3c 	bl	8001634 <LL_RCC_PLL_IsReady>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0f1      	beq.n	8001da6 <HAL_RCC_OscConfig+0x646>
 8001dc2:	e045      	b.n	8001e50 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc4:	f7ff fc28 	bl	8001618 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc8:	f7fe fe8a 	bl	8000ae0 <HAL_GetTick>
 8001dcc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd0:	f7fe fe86 	bl	8000ae0 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b0a      	cmp	r3, #10
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e037      	b.n	8001e52 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001de2:	f7ff fc27 	bl	8001634 <LL_RCC_PLL_IsReady>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1f1      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001dec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001df0:	68da      	ldr	r2, [r3, #12]
 8001df2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001df6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e60 <HAL_RCC_OscConfig+0x700>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	60cb      	str	r3, [r1, #12]
 8001dfc:	e028      	b.n	8001e50 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d101      	bne.n	8001e0a <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e023      	b.n	8001e52 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	f003 0203 	and.w	r2, r3, #3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d115      	bne.n	8001e4c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d10e      	bne.n	8001e4c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e38:	021b      	lsls	r3, r3, #8
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d106      	bne.n	8001e4c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d001      	beq.n	8001e50 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e000      	b.n	8001e52 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3720      	adds	r7, #32
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	11c1808c 	.word	0x11c1808c
 8001e60:	eefefffc 	.word	0xeefefffc

08001e64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e12c      	b.n	80020d2 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e78:	4b98      	ldr	r3, [pc, #608]	@ (80020dc <HAL_RCC_ClockConfig+0x278>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d91b      	bls.n	8001ebe <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e86:	4b95      	ldr	r3, [pc, #596]	@ (80020dc <HAL_RCC_ClockConfig+0x278>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f023 0207 	bic.w	r2, r3, #7
 8001e8e:	4993      	ldr	r1, [pc, #588]	@ (80020dc <HAL_RCC_ClockConfig+0x278>)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e96:	f7fe fe23 	bl	8000ae0 <HAL_GetTick>
 8001e9a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001e9e:	f7fe fe1f 	bl	8000ae0 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e110      	b.n	80020d2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb0:	4b8a      	ldr	r3, [pc, #552]	@ (80020dc <HAL_RCC_ClockConfig+0x278>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d1ef      	bne.n	8001e9e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d016      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff fb02 	bl	80014d8 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001ed4:	f7fe fe04 	bl	8000ae0 <HAL_GetTick>
 8001ed8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001edc:	f7fe fe00 	bl	8000ae0 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e0f1      	b.n	80020d2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001eee:	f7ff fbdf 	bl	80016b0 <LL_RCC_IsActiveFlag_HPRE>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0f1      	beq.n	8001edc <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0320 	and.w	r3, r3, #32
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d016      	beq.n	8001f32 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff faf8 	bl	80014fe <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001f0e:	f7fe fde7 	bl	8000ae0 <HAL_GetTick>
 8001f12:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001f16:	f7fe fde3 	bl	8000ae0 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e0d4      	b.n	80020d2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001f28:	f7ff fbd3 	bl	80016d2 <LL_RCC_IsActiveFlag_C2HPRE>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0f1      	beq.n	8001f16 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d016      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff faf0 	bl	8001528 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001f48:	f7fe fdca 	bl	8000ae0 <HAL_GetTick>
 8001f4c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001f50:	f7fe fdc6 	bl	8000ae0 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e0b7      	b.n	80020d2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001f62:	f7ff fbc8 	bl	80016f6 <LL_RCC_IsActiveFlag_SHDHPRE>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0f1      	beq.n	8001f50 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d016      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff fae9 	bl	8001554 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001f82:	f7fe fdad 	bl	8000ae0 <HAL_GetTick>
 8001f86:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001f8a:	f7fe fda9 	bl	8000ae0 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e09a      	b.n	80020d2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001f9c:	f7ff fbbd 	bl	800171a <LL_RCC_IsActiveFlag_PPRE1>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0f1      	beq.n	8001f8a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d017      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff fade 	bl	800157a <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001fbe:	f7fe fd8f 	bl	8000ae0 <HAL_GetTick>
 8001fc2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001fc6:	f7fe fd8b 	bl	8000ae0 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e07c      	b.n	80020d2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001fd8:	f7ff fbb0 	bl	800173c <LL_RCC_IsActiveFlag_PPRE2>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d0f1      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d043      	beq.n	8002076 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d106      	bne.n	8002004 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001ff6:	f7ff f956 	bl	80012a6 <LL_RCC_HSE_IsReady>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d11e      	bne.n	800203e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e066      	b.n	80020d2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	2b03      	cmp	r3, #3
 800200a:	d106      	bne.n	800201a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800200c:	f7ff fb12 	bl	8001634 <LL_RCC_PLL_IsReady>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d113      	bne.n	800203e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e05b      	b.n	80020d2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d106      	bne.n	8002030 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002022:	f7ff f9f0 	bl	8001406 <LL_RCC_MSI_IsReady>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d108      	bne.n	800203e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e050      	b.n	80020d2 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002030:	f7ff f966 	bl	8001300 <LL_RCC_HSI_IsReady>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e049      	b.n	80020d2 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff fa2a 	bl	800149c <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002048:	f7fe fd4a 	bl	8000ae0 <HAL_GetTick>
 800204c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204e:	e00a      	b.n	8002066 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002050:	f7fe fd46 	bl	8000ae0 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800205e:	4293      	cmp	r3, r2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e035      	b.n	80020d2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002066:	f7ff fa2c 	bl	80014c2 <LL_RCC_GetSysClkSource>
 800206a:	4602      	mov	r2, r0
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	429a      	cmp	r2, r3
 8002074:	d1ec      	bne.n	8002050 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002076:	4b19      	ldr	r3, [pc, #100]	@ (80020dc <HAL_RCC_ClockConfig+0x278>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	429a      	cmp	r2, r3
 8002082:	d21b      	bcs.n	80020bc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002084:	4b15      	ldr	r3, [pc, #84]	@ (80020dc <HAL_RCC_ClockConfig+0x278>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f023 0207 	bic.w	r2, r3, #7
 800208c:	4913      	ldr	r1, [pc, #76]	@ (80020dc <HAL_RCC_ClockConfig+0x278>)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	4313      	orrs	r3, r2
 8002092:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002094:	f7fe fd24 	bl	8000ae0 <HAL_GetTick>
 8002098:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800209a:	e008      	b.n	80020ae <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800209c:	f7fe fd20 	bl	8000ae0 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e011      	b.n	80020d2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ae:	4b0b      	ldr	r3, [pc, #44]	@ (80020dc <HAL_RCC_ClockConfig+0x278>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d1ef      	bne.n	800209c <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80020bc:	f000 f8b4 	bl	8002228 <HAL_RCC_GetHCLKFreq>
 80020c0:	4603      	mov	r3, r0
 80020c2:	4a07      	ldr	r2, [pc, #28]	@ (80020e0 <HAL_RCC_ClockConfig+0x27c>)
 80020c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80020c6:	4b07      	ldr	r3, [pc, #28]	@ (80020e4 <HAL_RCC_ClockConfig+0x280>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe fcbc 	bl	8000a48 <HAL_InitTick>
 80020d0:	4603      	mov	r3, r0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	58004000 	.word	0x58004000
 80020e0:	20000008 	.word	0x20000008
 80020e4:	2000000c 	.word	0x2000000c

080020e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e8:	b590      	push	{r4, r7, lr}
 80020ea:	b087      	sub	sp, #28
 80020ec:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020f6:	f7ff f9e4 	bl	80014c2 <LL_RCC_GetSysClkSource>
 80020fa:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020fc:	f7ff facd 	bl	800169a <LL_RCC_PLL_GetMainSource>
 8002100:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d005      	beq.n	8002114 <HAL_RCC_GetSysClockFreq+0x2c>
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	2b0c      	cmp	r3, #12
 800210c:	d139      	bne.n	8002182 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d136      	bne.n	8002182 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002114:	f7ff f987 	bl	8001426 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d115      	bne.n	800214a <HAL_RCC_GetSysClockFreq+0x62>
 800211e:	f7ff f982 	bl	8001426 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002122:	4603      	mov	r3, r0
 8002124:	2b01      	cmp	r3, #1
 8002126:	d106      	bne.n	8002136 <HAL_RCC_GetSysClockFreq+0x4e>
 8002128:	f7ff f98d 	bl	8001446 <LL_RCC_MSI_GetRange>
 800212c:	4603      	mov	r3, r0
 800212e:	0a1b      	lsrs	r3, r3, #8
 8002130:	f003 030f 	and.w	r3, r3, #15
 8002134:	e005      	b.n	8002142 <HAL_RCC_GetSysClockFreq+0x5a>
 8002136:	f7ff f991 	bl	800145c <LL_RCC_MSI_GetRangeAfterStandby>
 800213a:	4603      	mov	r3, r0
 800213c:	0a1b      	lsrs	r3, r3, #8
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	4a36      	ldr	r2, [pc, #216]	@ (800221c <HAL_RCC_GetSysClockFreq+0x134>)
 8002144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002148:	e014      	b.n	8002174 <HAL_RCC_GetSysClockFreq+0x8c>
 800214a:	f7ff f96c 	bl	8001426 <LL_RCC_MSI_IsEnabledRangeSelect>
 800214e:	4603      	mov	r3, r0
 8002150:	2b01      	cmp	r3, #1
 8002152:	d106      	bne.n	8002162 <HAL_RCC_GetSysClockFreq+0x7a>
 8002154:	f7ff f977 	bl	8001446 <LL_RCC_MSI_GetRange>
 8002158:	4603      	mov	r3, r0
 800215a:	091b      	lsrs	r3, r3, #4
 800215c:	f003 030f 	and.w	r3, r3, #15
 8002160:	e005      	b.n	800216e <HAL_RCC_GetSysClockFreq+0x86>
 8002162:	f7ff f97b 	bl	800145c <LL_RCC_MSI_GetRangeAfterStandby>
 8002166:	4603      	mov	r3, r0
 8002168:	091b      	lsrs	r3, r3, #4
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	4a2b      	ldr	r2, [pc, #172]	@ (800221c <HAL_RCC_GetSysClockFreq+0x134>)
 8002170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002174:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d115      	bne.n	80021a8 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002180:	e012      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	2b04      	cmp	r3, #4
 8002186:	d102      	bne.n	800218e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002188:	4b25      	ldr	r3, [pc, #148]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x138>)
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	e00c      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	2b08      	cmp	r3, #8
 8002192:	d109      	bne.n	80021a8 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002194:	f7ff f85a 	bl	800124c <LL_RCC_HSE_IsEnabledDiv2>
 8002198:	4603      	mov	r3, r0
 800219a:	2b01      	cmp	r3, #1
 800219c:	d102      	bne.n	80021a4 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800219e:	4b20      	ldr	r3, [pc, #128]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x138>)
 80021a0:	617b      	str	r3, [r7, #20]
 80021a2:	e001      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80021a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x13c>)
 80021a6:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021a8:	f7ff f98b 	bl	80014c2 <LL_RCC_GetSysClkSource>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b0c      	cmp	r3, #12
 80021b0:	d12f      	bne.n	8002212 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80021b2:	f7ff fa72 	bl	800169a <LL_RCC_PLL_GetMainSource>
 80021b6:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d003      	beq.n	80021c6 <HAL_RCC_GetSysClockFreq+0xde>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b03      	cmp	r3, #3
 80021c2:	d003      	beq.n	80021cc <HAL_RCC_GetSysClockFreq+0xe4>
 80021c4:	e00d      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80021c6:	4b16      	ldr	r3, [pc, #88]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x138>)
 80021c8:	60fb      	str	r3, [r7, #12]
        break;
 80021ca:	e00d      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80021cc:	f7ff f83e 	bl	800124c <LL_RCC_HSE_IsEnabledDiv2>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d102      	bne.n	80021dc <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80021d6:	4b12      	ldr	r3, [pc, #72]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x138>)
 80021d8:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80021da:	e005      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80021dc:	4b11      	ldr	r3, [pc, #68]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x13c>)
 80021de:	60fb      	str	r3, [r7, #12]
        break;
 80021e0:	e002      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	60fb      	str	r3, [r7, #12]
        break;
 80021e6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80021e8:	f7ff fa35 	bl	8001656 <LL_RCC_PLL_GetN>
 80021ec:	4602      	mov	r2, r0
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	fb03 f402 	mul.w	r4, r3, r2
 80021f4:	f7ff fa46 	bl	8001684 <LL_RCC_PLL_GetDivider>
 80021f8:	4603      	mov	r3, r0
 80021fa:	091b      	lsrs	r3, r3, #4
 80021fc:	3301      	adds	r3, #1
 80021fe:	fbb4 f4f3 	udiv	r4, r4, r3
 8002202:	f7ff fa34 	bl	800166e <LL_RCC_PLL_GetR>
 8002206:	4603      	mov	r3, r0
 8002208:	0f5b      	lsrs	r3, r3, #29
 800220a:	3301      	adds	r3, #1
 800220c:	fbb4 f3f3 	udiv	r3, r4, r3
 8002210:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002212:	697b      	ldr	r3, [r7, #20]
}
 8002214:	4618      	mov	r0, r3
 8002216:	371c      	adds	r7, #28
 8002218:	46bd      	mov	sp, r7
 800221a:	bd90      	pop	{r4, r7, pc}
 800221c:	08003d50 	.word	0x08003d50
 8002220:	00f42400 	.word	0x00f42400
 8002224:	01e84800 	.word	0x01e84800

08002228 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002228:	b598      	push	{r3, r4, r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800222c:	f7ff ff5c 	bl	80020e8 <HAL_RCC_GetSysClockFreq>
 8002230:	4604      	mov	r4, r0
 8002232:	f7ff f9b5 	bl	80015a0 <LL_RCC_GetAHBPrescaler>
 8002236:	4603      	mov	r3, r0
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	4a03      	ldr	r2, [pc, #12]	@ (800224c <HAL_RCC_GetHCLKFreq+0x24>)
 8002240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002244:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002248:	4618      	mov	r0, r3
 800224a:	bd98      	pop	{r3, r4, r7, pc}
 800224c:	08003cf0 	.word	0x08003cf0

08002250 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002250:	b598      	push	{r3, r4, r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002254:	f7ff ffe8 	bl	8002228 <HAL_RCC_GetHCLKFreq>
 8002258:	4604      	mov	r4, r0
 800225a:	f7ff f9b9 	bl	80015d0 <LL_RCC_GetAPB1Prescaler>
 800225e:	4603      	mov	r3, r0
 8002260:	0a1b      	lsrs	r3, r3, #8
 8002262:	4a03      	ldr	r2, [pc, #12]	@ (8002270 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002268:	fa24 f303 	lsr.w	r3, r4, r3
}
 800226c:	4618      	mov	r0, r3
 800226e:	bd98      	pop	{r3, r4, r7, pc}
 8002270:	08003d30 	.word	0x08003d30

08002274 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002274:	b598      	push	{r3, r4, r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002278:	f7ff ffd6 	bl	8002228 <HAL_RCC_GetHCLKFreq>
 800227c:	4604      	mov	r4, r0
 800227e:	f7ff f9b2 	bl	80015e6 <LL_RCC_GetAPB2Prescaler>
 8002282:	4603      	mov	r3, r0
 8002284:	0adb      	lsrs	r3, r3, #11
 8002286:	4a03      	ldr	r2, [pc, #12]	@ (8002294 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800228c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002290:	4618      	mov	r0, r3
 8002292:	bd98      	pop	{r3, r4, r7, pc}
 8002294:	08003d30 	.word	0x08003d30

08002298 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002298:	b590      	push	{r4, r7, lr}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	091b      	lsrs	r3, r3, #4
 80022a4:	f003 030f 	and.w	r3, r3, #15
 80022a8:	4a10      	ldr	r2, [pc, #64]	@ (80022ec <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80022aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ae:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80022b0:	f7ff f981 	bl	80015b6 <LL_RCC_GetAHB3Prescaler>
 80022b4:	4603      	mov	r3, r0
 80022b6:	091b      	lsrs	r3, r3, #4
 80022b8:	f003 030f 	and.w	r3, r3, #15
 80022bc:	4a0c      	ldr	r2, [pc, #48]	@ (80022f0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80022be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c8:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	4a09      	ldr	r2, [pc, #36]	@ (80022f4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80022ce:	fba2 2303 	umull	r2, r3, r2, r3
 80022d2:	0c9c      	lsrs	r4, r3, #18
 80022d4:	f7fe ff80 	bl	80011d8 <HAL_PWREx_GetVoltageRange>
 80022d8:	4603      	mov	r3, r0
 80022da:	4619      	mov	r1, r3
 80022dc:	4620      	mov	r0, r4
 80022de:	f000 f80b 	bl	80022f8 <RCC_SetFlashLatency>
 80022e2:	4603      	mov	r3, r0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd90      	pop	{r4, r7, pc}
 80022ec:	08003d50 	.word	0x08003d50
 80022f0:	08003cf0 	.word	0x08003cf0
 80022f4:	431bde83 	.word	0x431bde83

080022f8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08e      	sub	sp, #56	@ 0x38
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002302:	4a3a      	ldr	r2, [pc, #232]	@ (80023ec <RCC_SetFlashLatency+0xf4>)
 8002304:	f107 0320 	add.w	r3, r7, #32
 8002308:	e892 0003 	ldmia.w	r2, {r0, r1}
 800230c:	6018      	str	r0, [r3, #0]
 800230e:	3304      	adds	r3, #4
 8002310:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002312:	4a37      	ldr	r2, [pc, #220]	@ (80023f0 <RCC_SetFlashLatency+0xf8>)
 8002314:	f107 0318 	add.w	r3, r7, #24
 8002318:	e892 0003 	ldmia.w	r2, {r0, r1}
 800231c:	6018      	str	r0, [r3, #0]
 800231e:	3304      	adds	r3, #4
 8002320:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002322:	4a34      	ldr	r2, [pc, #208]	@ (80023f4 <RCC_SetFlashLatency+0xfc>)
 8002324:	f107 030c 	add.w	r3, r7, #12
 8002328:	ca07      	ldmia	r2, {r0, r1, r2}
 800232a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800232e:	2300      	movs	r3, #0
 8002330:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002338:	d11b      	bne.n	8002372 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800233a:	2300      	movs	r3, #0
 800233c:	633b      	str	r3, [r7, #48]	@ 0x30
 800233e:	e014      	b.n	800236a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	3338      	adds	r3, #56	@ 0x38
 8002346:	443b      	add	r3, r7
 8002348:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800234c:	461a      	mov	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4293      	cmp	r3, r2
 8002352:	d807      	bhi.n	8002364 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	3338      	adds	r3, #56	@ 0x38
 800235a:	443b      	add	r3, r7
 800235c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002360:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002362:	e021      	b.n	80023a8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002366:	3301      	adds	r3, #1
 8002368:	633b      	str	r3, [r7, #48]	@ 0x30
 800236a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800236c:	2b02      	cmp	r3, #2
 800236e:	d9e7      	bls.n	8002340 <RCC_SetFlashLatency+0x48>
 8002370:	e01a      	b.n	80023a8 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002372:	2300      	movs	r3, #0
 8002374:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002376:	e014      	b.n	80023a2 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	3338      	adds	r3, #56	@ 0x38
 800237e:	443b      	add	r3, r7
 8002380:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002384:	461a      	mov	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4293      	cmp	r3, r2
 800238a:	d807      	bhi.n	800239c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800238c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	3338      	adds	r3, #56	@ 0x38
 8002392:	443b      	add	r3, r7
 8002394:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002398:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800239a:	e005      	b.n	80023a8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800239c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800239e:	3301      	adds	r3, #1
 80023a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d9e7      	bls.n	8002378 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023a8:	4b13      	ldr	r3, [pc, #76]	@ (80023f8 <RCC_SetFlashLatency+0x100>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f023 0207 	bic.w	r2, r3, #7
 80023b0:	4911      	ldr	r1, [pc, #68]	@ (80023f8 <RCC_SetFlashLatency+0x100>)
 80023b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023b4:	4313      	orrs	r3, r2
 80023b6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80023b8:	f7fe fb92 	bl	8000ae0 <HAL_GetTick>
 80023bc:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80023be:	e008      	b.n	80023d2 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80023c0:	f7fe fb8e 	bl	8000ae0 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e007      	b.n	80023e2 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80023d2:	4b09      	ldr	r3, [pc, #36]	@ (80023f8 <RCC_SetFlashLatency+0x100>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80023dc:	429a      	cmp	r2, r3
 80023de:	d1ef      	bne.n	80023c0 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3738      	adds	r7, #56	@ 0x38
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	08003cd4 	.word	0x08003cd4
 80023f0:	08003cdc 	.word	0x08003cdc
 80023f4:	08003ce4 	.word	0x08003ce4
 80023f8:	58004000 	.word	0x58004000

080023fc <LL_RCC_LSE_IsReady>:
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002400:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b02      	cmp	r3, #2
 800240e:	d101      	bne.n	8002414 <LL_RCC_LSE_IsReady+0x18>
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <LL_RCC_LSE_IsReady+0x1a>
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	46bd      	mov	sp, r7
 800241a:	bc80      	pop	{r7}
 800241c:	4770      	bx	lr

0800241e <LL_RCC_SetUSARTClockSource>:
{
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002426:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800242a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	0c1b      	lsrs	r3, r3, #16
 8002432:	43db      	mvns	r3, r3
 8002434:	401a      	ands	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	b29b      	uxth	r3, r3
 800243a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800243e:	4313      	orrs	r3, r2
 8002440:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	bc80      	pop	{r7}
 800244c:	4770      	bx	lr

0800244e <LL_RCC_SetI2SClockSource>:
{
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002456:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800245a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800245e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002462:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4313      	orrs	r3, r2
 800246a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr

08002478 <LL_RCC_SetLPUARTClockSource>:
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002480:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002488:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800248c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4313      	orrs	r3, r2
 8002494:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr

080024a2 <LL_RCC_SetI2CClockSource>:
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80024aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	091b      	lsrs	r3, r3, #4
 80024b6:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80024ba:	43db      	mvns	r3, r3
 80024bc:	401a      	ands	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80024c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024ca:	4313      	orrs	r3, r2
 80024cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr

080024da <LL_RCC_SetLPTIMClockSource>:
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80024e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	0c1b      	lsrs	r3, r3, #16
 80024ee:	041b      	lsls	r3, r3, #16
 80024f0:	43db      	mvns	r3, r3
 80024f2:	401a      	ands	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	041b      	lsls	r3, r3, #16
 80024f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024fc:	4313      	orrs	r3, r2
 80024fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr

0800250c <LL_RCC_SetRNGClockSource>:
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002514:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800251c:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002520:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4313      	orrs	r3, r2
 8002528:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr

08002536 <LL_RCC_SetADCClockSource>:
{
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800253e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002546:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800254a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4313      	orrs	r3, r2
 8002552:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr

08002560 <LL_RCC_SetRTCClockSource>:
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002568:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800256c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002570:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002574:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4313      	orrs	r3, r2
 800257c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr

0800258a <LL_RCC_GetRTCClockSource>:
{
 800258a:	b480      	push	{r7}
 800258c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800258e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002596:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800259a:	4618      	mov	r0, r3
 800259c:	46bd      	mov	sp, r7
 800259e:	bc80      	pop	{r7}
 80025a0:	4770      	bx	lr

080025a2 <LL_RCC_ForceBackupDomainReset>:
{
 80025a2:	b480      	push	{r7}
 80025a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80025a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80025ba:	bf00      	nop
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr

080025c2 <LL_RCC_ReleaseBackupDomainReset>:
{
 80025c2:	b480      	push	{r7}
 80025c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80025c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80025da:	bf00      	nop
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr
	...

080025e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80025f0:	2300      	movs	r3, #0
 80025f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80025f4:	2300      	movs	r3, #0
 80025f6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d058      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002604:	f7fe fdda 	bl	80011bc <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002608:	f7fe fa6a 	bl	8000ae0 <HAL_GetTick>
 800260c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800260e:	e009      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002610:	f7fe fa66 	bl	8000ae0 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d902      	bls.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	74fb      	strb	r3, [r7, #19]
        break;
 8002622:	e006      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002624:	4b7b      	ldr	r3, [pc, #492]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800262c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002630:	d1ee      	bne.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002632:	7cfb      	ldrb	r3, [r7, #19]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d13c      	bne.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002638:	f7ff ffa7 	bl	800258a <LL_RCC_GetRTCClockSource>
 800263c:	4602      	mov	r2, r0
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002642:	429a      	cmp	r2, r3
 8002644:	d00f      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002646:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800264a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800264e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002652:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002654:	f7ff ffa5 	bl	80025a2 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002658:	f7ff ffb3 	bl	80025c2 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800265c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d014      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002670:	f7fe fa36 	bl	8000ae0 <HAL_GetTick>
 8002674:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002676:	e00b      	b.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002678:	f7fe fa32 	bl	8000ae0 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002686:	4293      	cmp	r3, r2
 8002688:	d902      	bls.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	74fb      	strb	r3, [r7, #19]
            break;
 800268e:	e004      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002690:	f7ff feb4 	bl	80023fc <LL_RCC_LSE_IsReady>
 8002694:	4603      	mov	r3, r0
 8002696:	2b01      	cmp	r3, #1
 8002698:	d1ee      	bne.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800269a:	7cfb      	ldrb	r3, [r7, #19]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d105      	bne.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff ff5b 	bl	8002560 <LL_RCC_SetRTCClockSource>
 80026aa:	e004      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026ac:	7cfb      	ldrb	r3, [r7, #19]
 80026ae:	74bb      	strb	r3, [r7, #18]
 80026b0:	e001      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026b2:	7cfb      	ldrb	r3, [r7, #19]
 80026b4:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d004      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff fea9 	bl	800241e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d004      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff fe9e 	bl	800241e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0320 	and.w	r3, r3, #32
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d004      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff fec0 	bl	8002478 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002700:	2b00      	cmp	r3, #0
 8002702:	d004      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff fee6 	bl	80024da <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002716:	2b00      	cmp	r3, #0
 8002718:	d004      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff fedb 	bl	80024da <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800272c:	2b00      	cmp	r3, #0
 800272e:	d004      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff fed0 	bl	80024da <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002742:	2b00      	cmp	r3, #0
 8002744:	d004      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff fea9 	bl	80024a2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002758:	2b00      	cmp	r3, #0
 800275a:	d004      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff fe9e 	bl	80024a2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800276e:	2b00      	cmp	r3, #0
 8002770:	d004      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff fe93 	bl	80024a2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0310 	and.w	r3, r3, #16
 8002784:	2b00      	cmp	r3, #0
 8002786:	d011      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff fe5e 	bl	800244e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800279a:	d107      	bne.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800279c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d010      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff fea5 	bl	800250c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d107      	bne.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80027ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027d8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d011      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff fea3 	bl	8002536 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027f8:	d107      	bne.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002804:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002808:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800280a:	7cbb      	ldrb	r3, [r7, #18]
}
 800280c:	4618      	mov	r0, r3
 800280e:	3718      	adds	r7, #24
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	58000400 	.word	0x58000400

08002818 <LL_RCC_GetUSARTClockSource>:
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8002820:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002824:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	401a      	ands	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	041b      	lsls	r3, r3, #16
 8002830:	4313      	orrs	r3, r2
}
 8002832:	4618      	mov	r0, r3
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr

0800283c <LL_RCC_GetLPUARTClockSource>:
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002844:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002848:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4013      	ands	r3, r2
}
 8002850:	4618      	mov	r0, r3
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr

0800285a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b082      	sub	sp, #8
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e042      	b.n	80028f2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002872:	2b00      	cmp	r3, #0
 8002874:	d106      	bne.n	8002884 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7fd ffcc 	bl	800081c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2224      	movs	r2, #36	@ 0x24
 8002888:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 0201 	bic.w	r2, r2, #1
 800289a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 fbf5 	bl	800308c <UART_SetConfig>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d101      	bne.n	80028ac <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e022      	b.n	80028f2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d002      	beq.n	80028ba <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 fe5d 	bl	8003574 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80028c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80028d8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f042 0201 	orr.w	r2, r2, #1
 80028e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 fee3 	bl	80036b6 <UART_CheckIdleState>
 80028f0:	4603      	mov	r3, r0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b08a      	sub	sp, #40	@ 0x28
 80028fe:	af02      	add	r7, sp, #8
 8002900:	60f8      	str	r0, [r7, #12]
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	603b      	str	r3, [r7, #0]
 8002906:	4613      	mov	r3, r2
 8002908:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002910:	2b20      	cmp	r3, #32
 8002912:	d173      	bne.n	80029fc <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d002      	beq.n	8002920 <HAL_UART_Transmit+0x26>
 800291a:	88fb      	ldrh	r3, [r7, #6]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e06c      	b.n	80029fe <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2221      	movs	r2, #33	@ 0x21
 8002930:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002934:	f7fe f8d4 	bl	8000ae0 <HAL_GetTick>
 8002938:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	88fa      	ldrh	r2, [r7, #6]
 800293e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	88fa      	ldrh	r2, [r7, #6]
 8002946:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002952:	d108      	bne.n	8002966 <HAL_UART_Transmit+0x6c>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d104      	bne.n	8002966 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800295c:	2300      	movs	r3, #0
 800295e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	61bb      	str	r3, [r7, #24]
 8002964:	e003      	b.n	800296e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800296a:	2300      	movs	r3, #0
 800296c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800296e:	e02c      	b.n	80029ca <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	2200      	movs	r2, #0
 8002978:	2180      	movs	r1, #128	@ 0x80
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 fee9 	bl	8003752 <UART_WaitOnFlagUntilTimeout>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e039      	b.n	80029fe <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10b      	bne.n	80029a8 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	461a      	mov	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800299e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	3302      	adds	r3, #2
 80029a4:	61bb      	str	r3, [r7, #24]
 80029a6:	e007      	b.n	80029b8 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	781a      	ldrb	r2, [r3, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	3301      	adds	r3, #1
 80029b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80029be:	b29b      	uxth	r3, r3
 80029c0:	3b01      	subs	r3, #1
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1cc      	bne.n	8002970 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2200      	movs	r2, #0
 80029de:	2140      	movs	r1, #64	@ 0x40
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 feb6 	bl	8003752 <UART_WaitOnFlagUntilTimeout>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e006      	b.n	80029fe <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2220      	movs	r2, #32
 80029f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80029f8:	2300      	movs	r3, #0
 80029fa:	e000      	b.n	80029fe <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 80029fc:	2302      	movs	r3, #2
  }
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3720      	adds	r7, #32
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
	...

08002a08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b0ba      	sub	sp, #232	@ 0xe8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002a32:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002a36:	4013      	ands	r3, r2
 8002a38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002a3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d11b      	bne.n	8002a7c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a48:	f003 0320 	and.w	r3, r3, #32
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d015      	beq.n	8002a7c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a54:	f003 0320 	and.w	r3, r3, #32
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d105      	bne.n	8002a68 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d009      	beq.n	8002a7c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 82e3 	beq.w	8003038 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	4798      	blx	r3
      }
      return;
 8002a7a:	e2dd      	b.n	8003038 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002a7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 8123 	beq.w	8002ccc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002a86:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002a8a:	4b8d      	ldr	r3, [pc, #564]	@ (8002cc0 <HAL_UART_IRQHandler+0x2b8>)
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d106      	bne.n	8002aa0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002a92:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002a96:	4b8b      	ldr	r3, [pc, #556]	@ (8002cc4 <HAL_UART_IRQHandler+0x2bc>)
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 8116 	beq.w	8002ccc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d011      	beq.n	8002ad0 <HAL_UART_IRQHandler+0xc8>
 8002aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00b      	beq.n	8002ad0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2201      	movs	r2, #1
 8002abe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ac6:	f043 0201 	orr.w	r2, r3, #1
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d011      	beq.n	8002b00 <HAL_UART_IRQHandler+0xf8>
 8002adc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00b      	beq.n	8002b00 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2202      	movs	r2, #2
 8002aee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002af6:	f043 0204 	orr.w	r2, r3, #4
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d011      	beq.n	8002b30 <HAL_UART_IRQHandler+0x128>
 8002b0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00b      	beq.n	8002b30 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2204      	movs	r2, #4
 8002b1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b26:	f043 0202 	orr.w	r2, r3, #2
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b34:	f003 0308 	and.w	r3, r3, #8
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d017      	beq.n	8002b6c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b40:	f003 0320 	and.w	r3, r3, #32
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d105      	bne.n	8002b54 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002b48:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002b4c:	4b5c      	ldr	r3, [pc, #368]	@ (8002cc0 <HAL_UART_IRQHandler+0x2b8>)
 8002b4e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00b      	beq.n	8002b6c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2208      	movs	r2, #8
 8002b5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b62:	f043 0208 	orr.w	r2, r3, #8
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d012      	beq.n	8002b9e <HAL_UART_IRQHandler+0x196>
 8002b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b7c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00c      	beq.n	8002b9e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b94:	f043 0220 	orr.w	r2, r3, #32
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 8249 	beq.w	800303c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bae:	f003 0320 	and.w	r3, r3, #32
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d013      	beq.n	8002bde <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bba:	f003 0320 	and.w	r3, r3, #32
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d105      	bne.n	8002bce <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002bc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d007      	beq.n	8002bde <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002be4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bf2:	2b40      	cmp	r3, #64	@ 0x40
 8002bf4:	d005      	beq.n	8002c02 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002bf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002bfa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d054      	beq.n	8002cac <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 fe6d 	bl	80038e2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c12:	2b40      	cmp	r3, #64	@ 0x40
 8002c14:	d146      	bne.n	8002ca4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	3308      	adds	r3, #8
 8002c1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c24:	e853 3f00 	ldrex	r3, [r3]
 8002c28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002c2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	3308      	adds	r3, #8
 8002c3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002c42:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002c46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002c4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002c52:	e841 2300 	strex	r3, r2, [r1]
 8002c56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002c5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1d9      	bne.n	8002c16 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d017      	beq.n	8002c9c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c72:	4a15      	ldr	r2, [pc, #84]	@ (8002cc8 <HAL_UART_IRQHandler+0x2c0>)
 8002c74:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fe f8c6 	bl	8000e0e <HAL_DMA_Abort_IT>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d019      	beq.n	8002cbc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8002c96:	4610      	mov	r0, r2
 8002c98:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c9a:	e00f      	b.n	8002cbc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f9e0 	bl	8003062 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ca2:	e00b      	b.n	8002cbc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 f9dc 	bl	8003062 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002caa:	e007      	b.n	8002cbc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f9d8 	bl	8003062 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8002cba:	e1bf      	b.n	800303c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cbc:	bf00      	nop
    return;
 8002cbe:	e1bd      	b.n	800303c <HAL_UART_IRQHandler+0x634>
 8002cc0:	10000001 	.word	0x10000001
 8002cc4:	04000120 	.word	0x04000120
 8002cc8:	080039ad 	.word	0x080039ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	f040 8153 	bne.w	8002f7c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cda:	f003 0310 	and.w	r3, r3, #16
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 814c 	beq.w	8002f7c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ce8:	f003 0310 	and.w	r3, r3, #16
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 8145 	beq.w	8002f7c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2210      	movs	r2, #16
 8002cf8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d04:	2b40      	cmp	r3, #64	@ 0x40
 8002d06:	f040 80bb 	bne.w	8002e80 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 818f 	beq.w	8003040 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002d28:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	f080 8187 	bcs.w	8003040 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d38:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0320 	and.w	r3, r3, #32
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f040 8087 	bne.w	8002e5e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d58:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d5c:	e853 3f00 	ldrex	r3, [r3]
 8002d60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002d64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	461a      	mov	r2, r3
 8002d76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002d7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002d7e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d82:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002d86:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002d8a:	e841 2300 	strex	r3, r2, [r1]
 8002d8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002d92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1da      	bne.n	8002d50 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	3308      	adds	r3, #8
 8002da0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002da4:	e853 3f00 	ldrex	r3, [r3]
 8002da8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002daa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002dac:	f023 0301 	bic.w	r3, r3, #1
 8002db0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	3308      	adds	r3, #8
 8002dba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002dbe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002dc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002dc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002dca:	e841 2300 	strex	r3, r2, [r1]
 8002dce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002dd0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1e1      	bne.n	8002d9a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	3308      	adds	r3, #8
 8002ddc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dde:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002de0:	e853 3f00 	ldrex	r3, [r3]
 8002de4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002de6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002de8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002dec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	3308      	adds	r3, #8
 8002df6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002dfa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002dfc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002e00:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002e02:	e841 2300 	strex	r3, r2, [r1]
 8002e06:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002e08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1e3      	bne.n	8002dd6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2220      	movs	r2, #32
 8002e12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e24:	e853 3f00 	ldrex	r3, [r3]
 8002e28:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002e2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e2c:	f023 0310 	bic.w	r3, r3, #16
 8002e30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	461a      	mov	r2, r3
 8002e3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e3e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002e40:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e42:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002e46:	e841 2300 	strex	r3, r2, [r1]
 8002e4a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002e4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1e4      	bne.n	8002e1c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fd ff7a 	bl	8000d52 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2202      	movs	r2, #2
 8002e62:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	4619      	mov	r1, r3
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 f8fb 	bl	8003074 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e7e:	e0df      	b.n	8003040 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 80d1 	beq.w	8003044 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8002ea2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 80cc 	beq.w	8003044 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eb4:	e853 3f00 	ldrex	r3, [r3]
 8002eb8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ebc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ec0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	461a      	mov	r2, r3
 8002eca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002ece:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ed0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002ed4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ed6:	e841 2300 	strex	r3, r2, [r1]
 8002eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002edc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1e4      	bne.n	8002eac <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	3308      	adds	r3, #8
 8002ee8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eec:	e853 3f00 	ldrex	r3, [r3]
 8002ef0:	623b      	str	r3, [r7, #32]
   return(result);
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ef8:	f023 0301 	bic.w	r3, r3, #1
 8002efc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	3308      	adds	r3, #8
 8002f06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002f0a:	633a      	str	r2, [r7, #48]	@ 0x30
 8002f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f12:	e841 2300 	strex	r3, r2, [r1]
 8002f16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1e1      	bne.n	8002ee2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2220      	movs	r2, #32
 8002f22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	e853 3f00 	ldrex	r3, [r3]
 8002f3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f023 0310 	bic.w	r3, r3, #16
 8002f46:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f54:	61fb      	str	r3, [r7, #28]
 8002f56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f58:	69b9      	ldr	r1, [r7, #24]
 8002f5a:	69fa      	ldr	r2, [r7, #28]
 8002f5c:	e841 2300 	strex	r3, r2, [r1]
 8002f60:	617b      	str	r3, [r7, #20]
   return(result);
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1e4      	bne.n	8002f32 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002f72:	4619      	mov	r1, r3
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 f87d 	bl	8003074 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f7a:	e063      	b.n	8003044 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00e      	beq.n	8002fa6 <HAL_UART_IRQHandler+0x59e>
 8002f88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d008      	beq.n	8002fa6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002f9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 fd45 	bl	8003a2e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002fa4:	e051      	b.n	800304a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d014      	beq.n	8002fdc <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002fb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d105      	bne.n	8002fca <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002fbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002fc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d008      	beq.n	8002fdc <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d03a      	beq.n	8003048 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	4798      	blx	r3
    }
    return;
 8002fda:	e035      	b.n	8003048 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d009      	beq.n	8002ffc <HAL_UART_IRQHandler+0x5f4>
 8002fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d003      	beq.n	8002ffc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 fcef 	bl	80039d8 <UART_EndTransmit_IT>
    return;
 8002ffa:	e026      	b.n	800304a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003000:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d009      	beq.n	800301c <HAL_UART_IRQHandler+0x614>
 8003008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800300c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 fd1c 	bl	8003a52 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800301a:	e016      	b.n	800304a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800301c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003020:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d010      	beq.n	800304a <HAL_UART_IRQHandler+0x642>
 8003028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800302c:	2b00      	cmp	r3, #0
 800302e:	da0c      	bge.n	800304a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 fd05 	bl	8003a40 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003036:	e008      	b.n	800304a <HAL_UART_IRQHandler+0x642>
      return;
 8003038:	bf00      	nop
 800303a:	e006      	b.n	800304a <HAL_UART_IRQHandler+0x642>
    return;
 800303c:	bf00      	nop
 800303e:	e004      	b.n	800304a <HAL_UART_IRQHandler+0x642>
      return;
 8003040:	bf00      	nop
 8003042:	e002      	b.n	800304a <HAL_UART_IRQHandler+0x642>
      return;
 8003044:	bf00      	nop
 8003046:	e000      	b.n	800304a <HAL_UART_IRQHandler+0x642>
    return;
 8003048:	bf00      	nop
  }
}
 800304a:	37e8      	adds	r7, #232	@ 0xe8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	bc80      	pop	{r7}
 8003060:	4770      	bx	lr

08003062 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	bc80      	pop	{r7}
 8003072:	4770      	bx	lr

08003074 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	460b      	mov	r3, r1
 800307e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	bc80      	pop	{r7}
 8003088:	4770      	bx	lr
	...

0800308c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800308c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003090:	b08c      	sub	sp, #48	@ 0x30
 8003092:	af00      	add	r7, sp, #0
 8003094:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	431a      	orrs	r2, r3
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	431a      	orrs	r2, r3
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	69db      	ldr	r3, [r3, #28]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	4b94      	ldr	r3, [pc, #592]	@ (800330c <UART_SetConfig+0x280>)
 80030bc:	4013      	ands	r3, r2
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	6812      	ldr	r2, [r2, #0]
 80030c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030c4:	430b      	orrs	r3, r1
 80030c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	68da      	ldr	r2, [r3, #12]
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a89      	ldr	r2, [pc, #548]	@ (8003310 <UART_SetConfig+0x284>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d004      	beq.n	80030f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030f4:	4313      	orrs	r3, r2
 80030f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003102:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	6812      	ldr	r2, [r2, #0]
 800310a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800310c:	430b      	orrs	r3, r1
 800310e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003116:	f023 010f 	bic.w	r1, r3, #15
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a7a      	ldr	r2, [pc, #488]	@ (8003314 <UART_SetConfig+0x288>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d127      	bne.n	8003180 <UART_SetConfig+0xf4>
 8003130:	2003      	movs	r0, #3
 8003132:	f7ff fb71 	bl	8002818 <LL_RCC_GetUSARTClockSource>
 8003136:	4603      	mov	r3, r0
 8003138:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 800313c:	2b03      	cmp	r3, #3
 800313e:	d81b      	bhi.n	8003178 <UART_SetConfig+0xec>
 8003140:	a201      	add	r2, pc, #4	@ (adr r2, 8003148 <UART_SetConfig+0xbc>)
 8003142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003146:	bf00      	nop
 8003148:	08003159 	.word	0x08003159
 800314c:	08003169 	.word	0x08003169
 8003150:	08003161 	.word	0x08003161
 8003154:	08003171 	.word	0x08003171
 8003158:	2301      	movs	r3, #1
 800315a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800315e:	e080      	b.n	8003262 <UART_SetConfig+0x1d6>
 8003160:	2302      	movs	r3, #2
 8003162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003166:	e07c      	b.n	8003262 <UART_SetConfig+0x1d6>
 8003168:	2304      	movs	r3, #4
 800316a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800316e:	e078      	b.n	8003262 <UART_SetConfig+0x1d6>
 8003170:	2308      	movs	r3, #8
 8003172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003176:	e074      	b.n	8003262 <UART_SetConfig+0x1d6>
 8003178:	2310      	movs	r3, #16
 800317a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800317e:	e070      	b.n	8003262 <UART_SetConfig+0x1d6>
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a64      	ldr	r2, [pc, #400]	@ (8003318 <UART_SetConfig+0x28c>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d138      	bne.n	80031fc <UART_SetConfig+0x170>
 800318a:	200c      	movs	r0, #12
 800318c:	f7ff fb44 	bl	8002818 <LL_RCC_GetUSARTClockSource>
 8003190:	4603      	mov	r3, r0
 8003192:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8003196:	2b0c      	cmp	r3, #12
 8003198:	d82c      	bhi.n	80031f4 <UART_SetConfig+0x168>
 800319a:	a201      	add	r2, pc, #4	@ (adr r2, 80031a0 <UART_SetConfig+0x114>)
 800319c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a0:	080031d5 	.word	0x080031d5
 80031a4:	080031f5 	.word	0x080031f5
 80031a8:	080031f5 	.word	0x080031f5
 80031ac:	080031f5 	.word	0x080031f5
 80031b0:	080031e5 	.word	0x080031e5
 80031b4:	080031f5 	.word	0x080031f5
 80031b8:	080031f5 	.word	0x080031f5
 80031bc:	080031f5 	.word	0x080031f5
 80031c0:	080031dd 	.word	0x080031dd
 80031c4:	080031f5 	.word	0x080031f5
 80031c8:	080031f5 	.word	0x080031f5
 80031cc:	080031f5 	.word	0x080031f5
 80031d0:	080031ed 	.word	0x080031ed
 80031d4:	2300      	movs	r3, #0
 80031d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031da:	e042      	b.n	8003262 <UART_SetConfig+0x1d6>
 80031dc:	2302      	movs	r3, #2
 80031de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031e2:	e03e      	b.n	8003262 <UART_SetConfig+0x1d6>
 80031e4:	2304      	movs	r3, #4
 80031e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031ea:	e03a      	b.n	8003262 <UART_SetConfig+0x1d6>
 80031ec:	2308      	movs	r3, #8
 80031ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031f2:	e036      	b.n	8003262 <UART_SetConfig+0x1d6>
 80031f4:	2310      	movs	r3, #16
 80031f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031fa:	e032      	b.n	8003262 <UART_SetConfig+0x1d6>
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a43      	ldr	r2, [pc, #268]	@ (8003310 <UART_SetConfig+0x284>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d12a      	bne.n	800325c <UART_SetConfig+0x1d0>
 8003206:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800320a:	f7ff fb17 	bl	800283c <LL_RCC_GetLPUARTClockSource>
 800320e:	4603      	mov	r3, r0
 8003210:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003214:	d01a      	beq.n	800324c <UART_SetConfig+0x1c0>
 8003216:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800321a:	d81b      	bhi.n	8003254 <UART_SetConfig+0x1c8>
 800321c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003220:	d00c      	beq.n	800323c <UART_SetConfig+0x1b0>
 8003222:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003226:	d815      	bhi.n	8003254 <UART_SetConfig+0x1c8>
 8003228:	2b00      	cmp	r3, #0
 800322a:	d003      	beq.n	8003234 <UART_SetConfig+0x1a8>
 800322c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003230:	d008      	beq.n	8003244 <UART_SetConfig+0x1b8>
 8003232:	e00f      	b.n	8003254 <UART_SetConfig+0x1c8>
 8003234:	2300      	movs	r3, #0
 8003236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800323a:	e012      	b.n	8003262 <UART_SetConfig+0x1d6>
 800323c:	2302      	movs	r3, #2
 800323e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003242:	e00e      	b.n	8003262 <UART_SetConfig+0x1d6>
 8003244:	2304      	movs	r3, #4
 8003246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800324a:	e00a      	b.n	8003262 <UART_SetConfig+0x1d6>
 800324c:	2308      	movs	r3, #8
 800324e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003252:	e006      	b.n	8003262 <UART_SetConfig+0x1d6>
 8003254:	2310      	movs	r3, #16
 8003256:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800325a:	e002      	b.n	8003262 <UART_SetConfig+0x1d6>
 800325c:	2310      	movs	r3, #16
 800325e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a2a      	ldr	r2, [pc, #168]	@ (8003310 <UART_SetConfig+0x284>)
 8003268:	4293      	cmp	r3, r2
 800326a:	f040 80a4 	bne.w	80033b6 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800326e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003272:	2b08      	cmp	r3, #8
 8003274:	d823      	bhi.n	80032be <UART_SetConfig+0x232>
 8003276:	a201      	add	r2, pc, #4	@ (adr r2, 800327c <UART_SetConfig+0x1f0>)
 8003278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327c:	080032a1 	.word	0x080032a1
 8003280:	080032bf 	.word	0x080032bf
 8003284:	080032a9 	.word	0x080032a9
 8003288:	080032bf 	.word	0x080032bf
 800328c:	080032af 	.word	0x080032af
 8003290:	080032bf 	.word	0x080032bf
 8003294:	080032bf 	.word	0x080032bf
 8003298:	080032bf 	.word	0x080032bf
 800329c:	080032b7 	.word	0x080032b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032a0:	f7fe ffd6 	bl	8002250 <HAL_RCC_GetPCLK1Freq>
 80032a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80032a6:	e010      	b.n	80032ca <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032a8:	4b1c      	ldr	r3, [pc, #112]	@ (800331c <UART_SetConfig+0x290>)
 80032aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80032ac:	e00d      	b.n	80032ca <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ae:	f7fe ff1b 	bl	80020e8 <HAL_RCC_GetSysClockFreq>
 80032b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80032b4:	e009      	b.n	80032ca <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80032bc:	e005      	b.n	80032ca <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80032be:	2300      	movs	r3, #0
 80032c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80032c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80032ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 8137 	beq.w	8003540 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d6:	4a12      	ldr	r2, [pc, #72]	@ (8003320 <UART_SetConfig+0x294>)
 80032d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032dc:	461a      	mov	r2, r3
 80032de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	4413      	add	r3, r2
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d305      	bcc.n	8003302 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d910      	bls.n	8003324 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003308:	e11a      	b.n	8003540 <UART_SetConfig+0x4b4>
 800330a:	bf00      	nop
 800330c:	cfff69f3 	.word	0xcfff69f3
 8003310:	40008000 	.word	0x40008000
 8003314:	40013800 	.word	0x40013800
 8003318:	40004400 	.word	0x40004400
 800331c:	00f42400 	.word	0x00f42400
 8003320:	08003d90 	.word	0x08003d90
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003326:	2200      	movs	r2, #0
 8003328:	60bb      	str	r3, [r7, #8]
 800332a:	60fa      	str	r2, [r7, #12]
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003330:	4a8e      	ldr	r2, [pc, #568]	@ (800356c <UART_SetConfig+0x4e0>)
 8003332:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003336:	b29b      	uxth	r3, r3
 8003338:	2200      	movs	r2, #0
 800333a:	603b      	str	r3, [r7, #0]
 800333c:	607a      	str	r2, [r7, #4]
 800333e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003342:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003346:	f7fc ff17 	bl	8000178 <__aeabi_uldivmod>
 800334a:	4602      	mov	r2, r0
 800334c:	460b      	mov	r3, r1
 800334e:	4610      	mov	r0, r2
 8003350:	4619      	mov	r1, r3
 8003352:	f04f 0200 	mov.w	r2, #0
 8003356:	f04f 0300 	mov.w	r3, #0
 800335a:	020b      	lsls	r3, r1, #8
 800335c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003360:	0202      	lsls	r2, r0, #8
 8003362:	6979      	ldr	r1, [r7, #20]
 8003364:	6849      	ldr	r1, [r1, #4]
 8003366:	0849      	lsrs	r1, r1, #1
 8003368:	2000      	movs	r0, #0
 800336a:	460c      	mov	r4, r1
 800336c:	4605      	mov	r5, r0
 800336e:	eb12 0804 	adds.w	r8, r2, r4
 8003372:	eb43 0905 	adc.w	r9, r3, r5
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	469a      	mov	sl, r3
 800337e:	4693      	mov	fp, r2
 8003380:	4652      	mov	r2, sl
 8003382:	465b      	mov	r3, fp
 8003384:	4640      	mov	r0, r8
 8003386:	4649      	mov	r1, r9
 8003388:	f7fc fef6 	bl	8000178 <__aeabi_uldivmod>
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	4613      	mov	r3, r2
 8003392:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003394:	6a3b      	ldr	r3, [r7, #32]
 8003396:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800339a:	d308      	bcc.n	80033ae <UART_SetConfig+0x322>
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033a2:	d204      	bcs.n	80033ae <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6a3a      	ldr	r2, [r7, #32]
 80033aa:	60da      	str	r2, [r3, #12]
 80033ac:	e0c8      	b.n	8003540 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80033b4:	e0c4      	b.n	8003540 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033be:	d167      	bne.n	8003490 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80033c0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80033c4:	2b08      	cmp	r3, #8
 80033c6:	d828      	bhi.n	800341a <UART_SetConfig+0x38e>
 80033c8:	a201      	add	r2, pc, #4	@ (adr r2, 80033d0 <UART_SetConfig+0x344>)
 80033ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ce:	bf00      	nop
 80033d0:	080033f5 	.word	0x080033f5
 80033d4:	080033fd 	.word	0x080033fd
 80033d8:	08003405 	.word	0x08003405
 80033dc:	0800341b 	.word	0x0800341b
 80033e0:	0800340b 	.word	0x0800340b
 80033e4:	0800341b 	.word	0x0800341b
 80033e8:	0800341b 	.word	0x0800341b
 80033ec:	0800341b 	.word	0x0800341b
 80033f0:	08003413 	.word	0x08003413
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033f4:	f7fe ff2c 	bl	8002250 <HAL_RCC_GetPCLK1Freq>
 80033f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80033fa:	e014      	b.n	8003426 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033fc:	f7fe ff3a 	bl	8002274 <HAL_RCC_GetPCLK2Freq>
 8003400:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003402:	e010      	b.n	8003426 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003404:	4b5a      	ldr	r3, [pc, #360]	@ (8003570 <UART_SetConfig+0x4e4>)
 8003406:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003408:	e00d      	b.n	8003426 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800340a:	f7fe fe6d 	bl	80020e8 <HAL_RCC_GetSysClockFreq>
 800340e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003410:	e009      	b.n	8003426 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003412:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003416:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003418:	e005      	b.n	8003426 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800341a:	2300      	movs	r3, #0
 800341c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003424:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 8089 	beq.w	8003540 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003432:	4a4e      	ldr	r2, [pc, #312]	@ (800356c <UART_SetConfig+0x4e0>)
 8003434:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003438:	461a      	mov	r2, r3
 800343a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003440:	005a      	lsls	r2, r3, #1
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	085b      	lsrs	r3, r3, #1
 8003448:	441a      	add	r2, r3
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003452:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003454:	6a3b      	ldr	r3, [r7, #32]
 8003456:	2b0f      	cmp	r3, #15
 8003458:	d916      	bls.n	8003488 <UART_SetConfig+0x3fc>
 800345a:	6a3b      	ldr	r3, [r7, #32]
 800345c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003460:	d212      	bcs.n	8003488 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	b29b      	uxth	r3, r3
 8003466:	f023 030f 	bic.w	r3, r3, #15
 800346a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800346c:	6a3b      	ldr	r3, [r7, #32]
 800346e:	085b      	lsrs	r3, r3, #1
 8003470:	b29b      	uxth	r3, r3
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	b29a      	uxth	r2, r3
 8003478:	8bfb      	ldrh	r3, [r7, #30]
 800347a:	4313      	orrs	r3, r2
 800347c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	8bfa      	ldrh	r2, [r7, #30]
 8003484:	60da      	str	r2, [r3, #12]
 8003486:	e05b      	b.n	8003540 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800348e:	e057      	b.n	8003540 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003490:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003494:	2b08      	cmp	r3, #8
 8003496:	d828      	bhi.n	80034ea <UART_SetConfig+0x45e>
 8003498:	a201      	add	r2, pc, #4	@ (adr r2, 80034a0 <UART_SetConfig+0x414>)
 800349a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349e:	bf00      	nop
 80034a0:	080034c5 	.word	0x080034c5
 80034a4:	080034cd 	.word	0x080034cd
 80034a8:	080034d5 	.word	0x080034d5
 80034ac:	080034eb 	.word	0x080034eb
 80034b0:	080034db 	.word	0x080034db
 80034b4:	080034eb 	.word	0x080034eb
 80034b8:	080034eb 	.word	0x080034eb
 80034bc:	080034eb 	.word	0x080034eb
 80034c0:	080034e3 	.word	0x080034e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034c4:	f7fe fec4 	bl	8002250 <HAL_RCC_GetPCLK1Freq>
 80034c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80034ca:	e014      	b.n	80034f6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034cc:	f7fe fed2 	bl	8002274 <HAL_RCC_GetPCLK2Freq>
 80034d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80034d2:	e010      	b.n	80034f6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034d4:	4b26      	ldr	r3, [pc, #152]	@ (8003570 <UART_SetConfig+0x4e4>)
 80034d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80034d8:	e00d      	b.n	80034f6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034da:	f7fe fe05 	bl	80020e8 <HAL_RCC_GetSysClockFreq>
 80034de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80034e0:	e009      	b.n	80034f6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80034e8:	e005      	b.n	80034f6 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80034f4:	bf00      	nop
    }

    if (pclk != 0U)
 80034f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d021      	beq.n	8003540 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003500:	4a1a      	ldr	r2, [pc, #104]	@ (800356c <UART_SetConfig+0x4e0>)
 8003502:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003506:	461a      	mov	r2, r3
 8003508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350a:	fbb3 f2f2 	udiv	r2, r3, r2
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	085b      	lsrs	r3, r3, #1
 8003514:	441a      	add	r2, r3
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	fbb2 f3f3 	udiv	r3, r2, r3
 800351e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003520:	6a3b      	ldr	r3, [r7, #32]
 8003522:	2b0f      	cmp	r3, #15
 8003524:	d909      	bls.n	800353a <UART_SetConfig+0x4ae>
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800352c:	d205      	bcs.n	800353a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	b29a      	uxth	r2, r3
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	60da      	str	r2, [r3, #12]
 8003538:	e002      	b.n	8003540 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	2201      	movs	r2, #1
 8003544:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	2201      	movs	r2, #1
 800354c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	2200      	movs	r2, #0
 8003554:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	2200      	movs	r2, #0
 800355a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800355c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003560:	4618      	mov	r0, r3
 8003562:	3730      	adds	r7, #48	@ 0x30
 8003564:	46bd      	mov	sp, r7
 8003566:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800356a:	bf00      	nop
 800356c:	08003d90 	.word	0x08003d90
 8003570:	00f42400 	.word	0x00f42400

08003574 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00a      	beq.n	800359e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c4:	f003 0304 	and.w	r3, r3, #4
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00a      	beq.n	80035e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e6:	f003 0308 	and.w	r3, r3, #8
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00a      	beq.n	8003604 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	430a      	orrs	r2, r1
 8003602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003608:	f003 0310 	and.w	r3, r3, #16
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00a      	beq.n	8003626 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800362a:	f003 0320 	and.w	r3, r3, #32
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00a      	beq.n	8003648 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800364c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003650:	2b00      	cmp	r3, #0
 8003652:	d01a      	beq.n	800368a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800366e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003672:	d10a      	bne.n	800368a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800368e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00a      	beq.n	80036ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	605a      	str	r2, [r3, #4]
  }
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bc80      	pop	{r7}
 80036b4:	4770      	bx	lr

080036b6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b086      	sub	sp, #24
 80036ba:	af02      	add	r7, sp, #8
 80036bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036c6:	f7fd fa0b 	bl	8000ae0 <HAL_GetTick>
 80036ca:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d10e      	bne.n	80036f8 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f832 	bl	8003752 <UART_WaitOnFlagUntilTimeout>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e028      	b.n	800374a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0304 	and.w	r3, r3, #4
 8003702:	2b04      	cmp	r3, #4
 8003704:	d10e      	bne.n	8003724 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003706:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f81c 	bl	8003752 <UART_WaitOnFlagUntilTimeout>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e012      	b.n	800374a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2220      	movs	r2, #32
 8003728:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2220      	movs	r2, #32
 8003730:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b09c      	sub	sp, #112	@ 0x70
 8003756:	af00      	add	r7, sp, #0
 8003758:	60f8      	str	r0, [r7, #12]
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	603b      	str	r3, [r7, #0]
 800375e:	4613      	mov	r3, r2
 8003760:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003762:	e0a9      	b.n	80038b8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003764:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376a:	f000 80a5 	beq.w	80038b8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800376e:	f7fd f9b7 	bl	8000ae0 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800377a:	429a      	cmp	r2, r3
 800377c:	d302      	bcc.n	8003784 <UART_WaitOnFlagUntilTimeout+0x32>
 800377e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003780:	2b00      	cmp	r3, #0
 8003782:	d140      	bne.n	8003806 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800378c:	e853 3f00 	ldrex	r3, [r3]
 8003790:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003792:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003794:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003798:	667b      	str	r3, [r7, #100]	@ 0x64
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	461a      	mov	r2, r3
 80037a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037a4:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80037a8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80037aa:	e841 2300 	strex	r3, r2, [r1]
 80037ae:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80037b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1e6      	bne.n	8003784 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	3308      	adds	r3, #8
 80037bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037c0:	e853 3f00 	ldrex	r3, [r3]
 80037c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80037c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037c8:	f023 0301 	bic.w	r3, r3, #1
 80037cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	3308      	adds	r3, #8
 80037d4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80037d6:	64ba      	str	r2, [r7, #72]	@ 0x48
 80037d8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80037dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037de:	e841 2300 	strex	r3, r2, [r1]
 80037e2:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80037e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1e5      	bne.n	80037b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2220      	movs	r2, #32
 80037ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2220      	movs	r2, #32
 80037f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e069      	b.n	80038da <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	2b00      	cmp	r3, #0
 8003812:	d051      	beq.n	80038b8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800381e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003822:	d149      	bne.n	80038b8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800382c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003836:	e853 3f00 	ldrex	r3, [r3]
 800383a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800383c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800383e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003842:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	461a      	mov	r2, r3
 800384a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800384c:	637b      	str	r3, [r7, #52]	@ 0x34
 800384e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003850:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003852:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003854:	e841 2300 	strex	r3, r2, [r1]
 8003858:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800385a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1e6      	bne.n	800382e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	3308      	adds	r3, #8
 8003866:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	e853 3f00 	ldrex	r3, [r3]
 800386e:	613b      	str	r3, [r7, #16]
   return(result);
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	f023 0301 	bic.w	r3, r3, #1
 8003876:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	3308      	adds	r3, #8
 800387e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003880:	623a      	str	r2, [r7, #32]
 8003882:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003884:	69f9      	ldr	r1, [r7, #28]
 8003886:	6a3a      	ldr	r2, [r7, #32]
 8003888:	e841 2300 	strex	r3, r2, [r1]
 800388c:	61bb      	str	r3, [r7, #24]
   return(result);
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1e5      	bne.n	8003860 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2220      	movs	r2, #32
 8003898:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2220      	movs	r2, #32
 80038a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e010      	b.n	80038da <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	69da      	ldr	r2, [r3, #28]
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	4013      	ands	r3, r2
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	bf0c      	ite	eq
 80038c8:	2301      	moveq	r3, #1
 80038ca:	2300      	movne	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	461a      	mov	r2, r3
 80038d0:	79fb      	ldrb	r3, [r7, #7]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	f43f af46 	beq.w	8003764 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3770      	adds	r7, #112	@ 0x70
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b095      	sub	sp, #84	@ 0x54
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038f2:	e853 3f00 	ldrex	r3, [r3]
 80038f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80038f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	461a      	mov	r2, r3
 8003906:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003908:	643b      	str	r3, [r7, #64]	@ 0x40
 800390a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800390e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003910:	e841 2300 	strex	r3, r2, [r1]
 8003914:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1e6      	bne.n	80038ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	3308      	adds	r3, #8
 8003922:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	e853 3f00 	ldrex	r3, [r3]
 800392a:	61fb      	str	r3, [r7, #28]
   return(result);
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003932:	f023 0301 	bic.w	r3, r3, #1
 8003936:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	3308      	adds	r3, #8
 800393e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003940:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003942:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003944:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003946:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003948:	e841 2300 	strex	r3, r2, [r1]
 800394c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800394e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1e3      	bne.n	800391c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003958:	2b01      	cmp	r3, #1
 800395a:	d118      	bne.n	800398e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	e853 3f00 	ldrex	r3, [r3]
 8003968:	60bb      	str	r3, [r7, #8]
   return(result);
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	f023 0310 	bic.w	r3, r3, #16
 8003970:	647b      	str	r3, [r7, #68]	@ 0x44
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	461a      	mov	r2, r3
 8003978:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800397a:	61bb      	str	r3, [r7, #24]
 800397c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397e:	6979      	ldr	r1, [r7, #20]
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	e841 2300 	strex	r3, r2, [r1]
 8003986:	613b      	str	r3, [r7, #16]
   return(result);
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1e6      	bne.n	800395c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2220      	movs	r2, #32
 8003992:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80039a2:	bf00      	nop
 80039a4:	3754      	adds	r7, #84	@ 0x54
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bc80      	pop	{r7}
 80039aa:	4770      	bx	lr

080039ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f7ff fb49 	bl	8003062 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039d0:	bf00      	nop
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b088      	sub	sp, #32
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	e853 3f00 	ldrex	r3, [r3]
 80039ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039f4:	61fb      	str	r3, [r7, #28]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	461a      	mov	r2, r3
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	61bb      	str	r3, [r7, #24]
 8003a00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a02:	6979      	ldr	r1, [r7, #20]
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	e841 2300 	strex	r3, r2, [r1]
 8003a0a:	613b      	str	r3, [r7, #16]
   return(result);
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1e6      	bne.n	80039e0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2220      	movs	r2, #32
 8003a16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7ff fb15 	bl	8003050 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a26:	bf00      	nop
 8003a28:	3720      	adds	r7, #32
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b083      	sub	sp, #12
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bc80      	pop	{r7}
 8003a3e:	4770      	bx	lr

08003a40 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bc80      	pop	{r7}
 8003a50:	4770      	bx	lr

08003a52 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bc80      	pop	{r7}
 8003a62:	4770      	bx	lr

08003a64 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d101      	bne.n	8003a7a <HAL_UARTEx_DisableFifoMode+0x16>
 8003a76:	2302      	movs	r3, #2
 8003a78:	e027      	b.n	8003aca <HAL_UARTEx_DisableFifoMode+0x66>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2224      	movs	r2, #36	@ 0x24
 8003a86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0201 	bic.w	r2, r2, #1
 8003aa0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003aa8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2220      	movs	r2, #32
 8003abc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bc80      	pop	{r7}
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d101      	bne.n	8003aec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	e02d      	b.n	8003b48 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2224      	movs	r2, #36	@ 0x24
 8003af8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0201 	bic.w	r2, r2, #1
 8003b12:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f84f 	bl	8003bcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2220      	movs	r2, #32
 8003b3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d101      	bne.n	8003b68 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003b64:	2302      	movs	r3, #2
 8003b66:	e02d      	b.n	8003bc4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2224      	movs	r2, #36	@ 0x24
 8003b74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 0201 	bic.w	r2, r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f811 	bl	8003bcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d108      	bne.n	8003bee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003bec:	e031      	b.n	8003c52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003bee:	2308      	movs	r3, #8
 8003bf0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003bf2:	2308      	movs	r3, #8
 8003bf4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	0e5b      	lsrs	r3, r3, #25
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	f003 0307 	and.w	r3, r3, #7
 8003c04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	0f5b      	lsrs	r3, r3, #29
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	f003 0307 	and.w	r3, r3, #7
 8003c14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c16:	7bbb      	ldrb	r3, [r7, #14]
 8003c18:	7b3a      	ldrb	r2, [r7, #12]
 8003c1a:	4910      	ldr	r1, [pc, #64]	@ (8003c5c <UARTEx_SetNbDataToProcess+0x90>)
 8003c1c:	5c8a      	ldrb	r2, [r1, r2]
 8003c1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003c22:	7b3a      	ldrb	r2, [r7, #12]
 8003c24:	490e      	ldr	r1, [pc, #56]	@ (8003c60 <UARTEx_SetNbDataToProcess+0x94>)
 8003c26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c28:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c34:	7bfb      	ldrb	r3, [r7, #15]
 8003c36:	7b7a      	ldrb	r2, [r7, #13]
 8003c38:	4908      	ldr	r1, [pc, #32]	@ (8003c5c <UARTEx_SetNbDataToProcess+0x90>)
 8003c3a:	5c8a      	ldrb	r2, [r1, r2]
 8003c3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003c40:	7b7a      	ldrb	r2, [r7, #13]
 8003c42:	4907      	ldr	r1, [pc, #28]	@ (8003c60 <UARTEx_SetNbDataToProcess+0x94>)
 8003c44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c46:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003c52:	bf00      	nop
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bc80      	pop	{r7}
 8003c5a:	4770      	bx	lr
 8003c5c:	08003da8 	.word	0x08003da8
 8003c60:	08003db0 	.word	0x08003db0

08003c64 <memset>:
 8003c64:	4402      	add	r2, r0
 8003c66:	4603      	mov	r3, r0
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d100      	bne.n	8003c6e <memset+0xa>
 8003c6c:	4770      	bx	lr
 8003c6e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c72:	e7f9      	b.n	8003c68 <memset+0x4>

08003c74 <__libc_init_array>:
 8003c74:	b570      	push	{r4, r5, r6, lr}
 8003c76:	4d0d      	ldr	r5, [pc, #52]	@ (8003cac <__libc_init_array+0x38>)
 8003c78:	4c0d      	ldr	r4, [pc, #52]	@ (8003cb0 <__libc_init_array+0x3c>)
 8003c7a:	1b64      	subs	r4, r4, r5
 8003c7c:	10a4      	asrs	r4, r4, #2
 8003c7e:	2600      	movs	r6, #0
 8003c80:	42a6      	cmp	r6, r4
 8003c82:	d109      	bne.n	8003c98 <__libc_init_array+0x24>
 8003c84:	4d0b      	ldr	r5, [pc, #44]	@ (8003cb4 <__libc_init_array+0x40>)
 8003c86:	4c0c      	ldr	r4, [pc, #48]	@ (8003cb8 <__libc_init_array+0x44>)
 8003c88:	f000 f818 	bl	8003cbc <_init>
 8003c8c:	1b64      	subs	r4, r4, r5
 8003c8e:	10a4      	asrs	r4, r4, #2
 8003c90:	2600      	movs	r6, #0
 8003c92:	42a6      	cmp	r6, r4
 8003c94:	d105      	bne.n	8003ca2 <__libc_init_array+0x2e>
 8003c96:	bd70      	pop	{r4, r5, r6, pc}
 8003c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c9c:	4798      	blx	r3
 8003c9e:	3601      	adds	r6, #1
 8003ca0:	e7ee      	b.n	8003c80 <__libc_init_array+0xc>
 8003ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ca6:	4798      	blx	r3
 8003ca8:	3601      	adds	r6, #1
 8003caa:	e7f2      	b.n	8003c92 <__libc_init_array+0x1e>
 8003cac:	08003dc0 	.word	0x08003dc0
 8003cb0:	08003dc0 	.word	0x08003dc0
 8003cb4:	08003dc0 	.word	0x08003dc0
 8003cb8:	08003dc4 	.word	0x08003dc4

08003cbc <_init>:
 8003cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cbe:	bf00      	nop
 8003cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cc2:	bc08      	pop	{r3}
 8003cc4:	469e      	mov	lr, r3
 8003cc6:	4770      	bx	lr

08003cc8 <_fini>:
 8003cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cca:	bf00      	nop
 8003ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cce:	bc08      	pop	{r3}
 8003cd0:	469e      	mov	lr, r3
 8003cd2:	4770      	bx	lr
